// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPLAIN = 57444
const EXTRACT = 57445
const EXTRACT_DURATION = 57446
const FALSE = 57447
const FAMILY = 57448
const FETCH = 57449
const FILTER = 57450
const FIRST = 57451
const FLOAT = 57452
const FLOORDIV = 57453
const FOLLOWING = 57454
const FOR = 57455
const FORCE_INDEX = 57456
const FOREIGN = 57457
const FROM = 57458
const FULL = 57459
const GRANT = 57460
const GRANTS = 57461
const GREATEST = 57462
const GROUP = 57463
const GROUPING = 57464
const HAVING = 57465
const HELP = 57466
const HIGH = 57467
const HOUR = 57468
const INCREMENTAL = 57469
const IF = 57470
const IFNULL = 57471
const ILIKE = 57472
const IN = 57473
const INTERLEAVE = 57474
const INDEX = 57475
const INDEXES = 57476
const INITIALLY = 57477
const INNER = 57478
const INSERT = 57479
const INT = 57480
const INT2VECTOR = 57481
const INT8 = 57482
const INT64 = 57483
const INTEGER = 57484
const INTERSECT = 57485
const INTERVAL = 57486
const INTO = 57487
const IS = 57488
const ISOLATION = 57489
const JOIN = 57490
const KEY = 57491
const KEYS = 57492
const LATERAL = 57493
const LC_CTYPE = 57494
const LC_COLLATE = 57495
const LEADING = 57496
const LEAST = 57497
const LEFT = 57498
const LEVEL = 57499
const LIKE = 57500
const LIMIT = 57501
const LOCAL = 57502
const LOCALTIME = 57503
const LOCALTIMESTAMP = 57504
const LOW = 57505
const LSHIFT = 57506
const MATCH = 57507
const MINUTE = 57508
const MONTH = 57509
const NAN = 57510
const NAME = 57511
const NAMES = 57512
const NATURAL = 57513
const NEXT = 57514
const NO = 57515
const NO_INDEX_JOIN = 57516
const NORMAL = 57517
const NOT = 57518
const NOTHING = 57519
const NULL = 57520
const NULLIF = 57521
const NULLS = 57522
const NUMERIC = 57523
const OF = 57524
const OFF = 57525
const OFFSET = 57526
const OID = 57527
const ON = 57528
const ONLY = 57529
const OPTIONS = 57530
const OR = 57531
const ORDER = 57532
const ORDINALITY = 57533
const OUT = 57534
const OUTER = 57535
const OVER = 57536
const OVERLAPS = 57537
const OVERLAY = 57538
const PARENT = 57539
const PARTIAL = 57540
const PARTITION = 57541
const PASSWORD = 57542
const PLACING = 57543
const POSITION = 57544
const PRECEDING = 57545
const PRECISION = 57546
const PREPARE = 57547
const PRIMARY = 57548
const PRIORITY = 57549
const RANGE = 57550
const READ = 57551
const REAL = 57552
const RECURSIVE = 57553
const REF = 57554
const REFERENCES = 57555
const REGCLASS = 57556
const REGPROC = 57557
const REGPROCEDURE = 57558
const REGNAMESPACE = 57559
const REGTYPE = 57560
const RENAME = 57561
const REPEATABLE = 57562
const RELEASE = 57563
const RESET = 57564
const RESTORE = 57565
const RESTRICT = 57566
const RETURNING = 57567
const REVOKE = 57568
const RIGHT = 57569
const ROLLBACK = 57570
const ROLLUP = 57571
const ROW = 57572
const ROWS = 57573
const RSHIFT = 57574
const SAVEPOINT = 57575
const SCATTER = 57576
const SEARCH = 57577
const SECOND = 57578
const SELECT = 57579
const SERIAL = 57580
const SERIALIZABLE = 57581
const SESSION = 57582
const SESSION_USER = 57583
const SET = 57584
const SETTING = 57585
const SETTINGS = 57586
const SHOW = 57587
const SIMILAR = 57588
const SIMPLE = 57589
const SMALLINT = 57590
const SMALLSERIAL = 57591
const SNAPSHOT = 57592
const SOME = 57593
const SPLIT = 57594
const SQL = 57595
const START = 57596
const STATUS = 57597
const STDIN = 57598
const STRICT = 57599
const STRING = 57600
const STORING = 57601
const SUBSTRING = 57602
const SYMMETRIC = 57603
const SYSTEM = 57604
const TABLE = 57605
const TABLES = 57606
const TEMPLATE = 57607
const TESTING_RANGES = 57608
const TESTING_RELOCATE = 57609
const TEXT = 57610
const THEN = 57611
const TIME = 57612
const TIMESTAMP = 57613
const TIMESTAMPTZ = 57614
const TO = 57615
const TRAILING = 57616
const TRANSACTION = 57617
const TREAT = 57618
const TRIM = 57619
const TRUE = 57620
const TRUNCATE = 57621
const TYPE = 57622
const UNBOUNDED = 57623
const UNCOMMITTED = 57624
const UNION = 57625
const UNIQUE = 57626
const UNKNOWN = 57627
const UPDATE = 57628
const UPSERT = 57629
const USER = 57630
const USERS = 57631
const USING = 57632
const VALID = 57633
const VALIDATE = 57634
const VALUE = 57635
const VALUES = 57636
const VARCHAR = 57637
const VARIADIC = 57638
const VIEW = 57639
const VARYING = 57640
const WHEN = 57641
const WHERE = 57642
const WINDOW = 57643
const WITH = 57644
const WITHIN = 57645
const WITHOUT = 57646
const WRITE = 57647
const YEAR = 57648
const ZONE = 57649
const NOT_LA = 57650
const WITH_LA = 57651
const AS_LA = 57652
const POSTFIXOP = 57653
const UMINUS = 57654

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5477

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	331, 31,
	-2, 433,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	99, 416,
	143, 416,
	159, 416,
	184, 416,
	190, 416,
	283, 416,
	-2, 406,
	-1, 66,
	99, 415,
	143, 415,
	159, 415,
	184, 415,
	190, 415,
	283, 415,
	-2, 409,
	-1, 75,
	1, 31,
	331, 31,
	-2, 433,
	-1, 436,
	1, 200,
	331, 200,
	-2, 999,
	-1, 476,
	159, 443,
	184, 443,
	-2, 412,
	-1, 479,
	159, 442,
	184, 442,
	-2, 410,
	-1, 615,
	159, 442,
	184, 442,
	-2, 413,
	-1, 674,
	328, 932,
	-2, 925,
	-1, 675,
	328, 933,
	-2, 926,
	-1, 681,
	5, 601,
	328, 601,
	-2, 1109,
	-1, 705,
	5, 562,
	-2, 1083,
	-1, 706,
	5, 595,
	328, 595,
	-2, 1085,
	-1, 707,
	5, 570,
	-2, 1086,
	-1, 708,
	5, 569,
	-2, 1087,
	-1, 709,
	5, 595,
	328, 595,
	-2, 1090,
	-1, 710,
	5, 595,
	328, 595,
	-2, 1091,
	-1, 711,
	5, 596,
	-2, 1094,
	-1, 712,
	5, 556,
	-2, 1095,
	-1, 713,
	5, 556,
	-2, 1096,
	-1, 714,
	5, 577,
	-2, 1100,
	-1, 715,
	5, 557,
	-2, 1105,
	-1, 716,
	5, 558,
	-2, 1106,
	-1, 717,
	5, 559,
	-2, 1107,
	-1, 718,
	5, 560,
	-2, 1108,
	-1, 719,
	5, 556,
	-2, 1113,
	-1, 720,
	5, 563,
	-2, 1118,
	-1, 721,
	5, 561,
	-2, 1121,
	-1, 722,
	5, 593,
	328, 593,
	-2, 1123,
	-1, 723,
	5, 597,
	-2, 1126,
	-1, 724,
	5, 599,
	-2, 1127,
	-1, 725,
	5, 592,
	328, 592,
	-2, 1131,
	-1, 999,
	99, 416,
	143, 416,
	159, 416,
	184, 416,
	190, 416,
	283, 416,
	-2, 720,
	-1, 1008,
	328, 909,
	-2, 897,
	-1, 1224,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 636,
	-1, 1225,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 637,
	-1, 1226,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 638,
	-1, 1230,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 642,
	-1, 1231,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 643,
	-1, 1232,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 644,
	-1, 1235,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 649,
	-1, 1241,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 651,
	-1, 1243,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 655,
	-1, 1244,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 656,
	-1, 1245,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 657,
	-1, 1246,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 658,
	-1, 1273,
	195, 791,
	-2, 794,
	-1, 1302,
	116, 831,
	328, 932,
	-2, 925,
	-1, 1303,
	116, 832,
	-2, 1079,
	-1, 1304,
	116, 833,
	-2, 998,
	-1, 1305,
	116, 834,
	-2, 967,
	-1, 1306,
	116, 835,
	-2, 982,
	-1, 1307,
	116, 836,
	-2, 997,
	-1, 1308,
	116, 837,
	-2, 1044,
	-1, 1464,
	99, 416,
	143, 416,
	159, 416,
	184, 416,
	190, 416,
	283, 416,
	-2, 492,
	-1, 1468,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 650,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 652,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 653,
	-1, 1492,
	195, 790,
	-2, 793,
	-1, 1681,
	1, 493,
	69, 493,
	99, 493,
	117, 493,
	121, 493,
	123, 493,
	136, 493,
	143, 493,
	148, 493,
	156, 493,
	159, 493,
	171, 493,
	184, 493,
	186, 493,
	190, 493,
	225, 493,
	227, 493,
	283, 493,
	290, 493,
	300, 493,
	301, 493,
	310, 493,
	327, 493,
	329, 493,
	331, 493,
	332, 493,
	-2, 492,
	-1, 1683,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 654,
	-1, 1688,
	146, 0,
	-2, 670,
	-1, 1698,
	195, 792,
	-2, 795,
	-1, 1732,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 697,
	-1, 1733,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 698,
	-1, 1734,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 699,
	-1, 1738,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 703,
	-1, 1739,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 704,
	-1, 1740,
	13, 0,
	14, 0,
	15, 0,
	311, 0,
	312, 0,
	313, 0,
	-2, 705,
	-1, 1860,
	146, 0,
	-2, 671,
	-1, 1863,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 674,
	-1, 1864,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 676,
	-1, 1969,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 675,
	-1, 1970,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 677,
	-1, 1977,
	146, 0,
	-2, 706,
	-1, 2033,
	146, 0,
	-2, 707,
	-1, 2098,
	36, 0,
	130, 0,
	158, 0,
	246, 0,
	308, 0,
	314, 0,
	-2, 1082,
}

const sqlPrivate = 57344

const sqlLast = 29763

var sqlAct = [...]int{

	675, 2097, 1638, 2075, 1676, 2122, 2039, 2076, 1904, 1093,
	2077, 2096, 480, 917, 1101, 1950, 1851, 1462, 801, 665,
	1709, 1826, 673, 1163, 1677, 1930, 672, 289, 728, 1648,
	1783, 668, 1769, 88, 88, 88, 305, 1438, 1585, 1440,
	923, 501, 51, 1459, 1181, 307, 88, 88, 88, 1586,
	1837, 88, 762, 651, 88, 1831, 1167, 764, 1188, 543,
	1162, 1196, 88, 88, 487, 65, 1654, 1203, 291, 20,
	88, 88, 1553, 1552, 88, 770, 1271, 88, 88, 88,
	88, 1663, 1450, 88, 88, 919, 1389, 1166, 1503, 1004,
	1133, 785, 1195, 738, 1102, 1383, 1053, 1445, 1062, 634,
	1281, 1255, 1258, 525, 1201, 645, 741, 516, 65, 1085,
	1117, 485, 296, 30, 295, 16, 864, 1328, 601, 297,
	8, 940, 774, 1153, 1299, 771, 743, 995, 1126, 644,
	635, 544, 1198, 1095, 602, 537, 1038, 538, 1170, 535,
	65, 1034, 945, 1784, 20, 490, 437, 618, 66, 617,
	619, 908, 80, 433, 67, 423, 479, 866, 862, 667,
	414, 531, 778, 84, 488, 622, 1962, 1331, 600, 1963,
	484, 1523, 1524, 1491, 426, 787, 2113, 787, 787, 767,
	484, 2092, 304, 1094, 1782, 1130, 277, 1460, 30, 2087,
	16, 2086, 1136, 1136, 1136, 8, 948, 949, 1098, 968,
	969, 970, 978, 979, 980, 2083, 498, 802, 767, 504,
	1086, 1495, 511, 507, 477, 1400, 1496, 466, 727, 951,
	476, 2073, 982, 1538, 1123, 1494, 2068, 64, 1131, 767,
	1136, 1401, 1448, 948, 949, 492, 434, 2064, 2035, 71,
	767, 1123, 950, 2029, 2011, 757, 767, 1782, 965, 2007,
	2017, 2002, 767, 42, 2001, 1971, 951, 1960, 1123, 1957,
	796, 43, 1958, 1944, 1941, 73, 1782, 767, 1132, 1129,
	1939, 1915, 1529, 1782, 767, 1914, 947, 1886, 1782, 950,
	1136, 1865, 1089, 44, 1136, 88, 88, 88, 88, 88,
	1862, 547, 1854, 1123, 1448, 1136, 74, 956, 1803, 467,
	1802, 1136, 1781, 1136, 69, 1782, 1692, 1624, 946, 1136,
	1092, 70, 1136, 1086, 1745, 1619, 975, 983, 1092, 1695,
	1570, 1425, 1502, 1571, 89, 1539, 1568, 1051, 1567, 1136,
	68, 1136, 981, 485, 956, 1089, 1566, 1492, 1134, 1136,
	1136, 1428, 1427, 1192, 973, 767, 767, 1275, 545, 71,
	966, 1187, 788, 1140, 788, 788, 1136, 1523, 1524, 1148,
	1541, 1542, 1543, 1135, 1122, 1091, 1136, 1123, 1092, 308,
	630, 1050, 911, 1859, 1049, 73, 795, 910, 856, 796,
	855, 767, 514, 560, 497, 71, 75, 966, 1785, 520,
	888, 581, 1463, 1540, 1523, 1524, 71, 1541, 1542, 1543,
	1845, 2111, 2095, 2082, 55, 2044, 74, 2030, 1128, 1538,
	88, 73, 629, 1942, 69, 1891, 1887, 532, 967, 1879,
	1878, 70, 73, 524, 1877, 88, 541, 1873, 88, 88,
	1127, 1811, 976, 1872, 540, 540, 1871, 1817, 1760, 1755,
	1097, 1012, 74, 1754, 2094, 1753, 1538, 1400, 1703, 1681,
	1653, 1628, 1575, 74, 1572, 967, 1560, 1430, 1529, 1626,
	791, 69, 786, 915, 1551, 1522, 88, 1519, 70, 88,
	1518, 88, 88, 88, 1516, 88, 68, 1534, 1532, 1533,
	1525, 1526, 1527, 1528, 1530, 1531, 1508, 68, 2004, 616,
	88, 1507, 946, 1544, 974, 1529, 1426, 962, 963, 964,
	977, 88, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 1539, 1345, 1296, 547, 88, 734, 1295, 629, 1523,
	1524, 307, 547, 1461, 88, 1267, 1005, 628, 68, 88,
	88, 88, 522, 88, 922, 1711, 2056, 2014, 2000, 733,
	959, 960, 952, 953, 954, 955, 957, 958, 1539, 1999,
	569, 2066, 88, 88, 1998, 1990, 1988, 768, 1979, 1966,
	88, 1953, 88, 1937, 1901, 615, 570, 88, 1884, 1856,
	1820, 1808, 1788, 1810, 547, 547, 1687, 1668, 1646, 1540,
	1644, 1643, 307, 834, 88, 88, 808, 88, 88, 88,
	88, 88, 88, 88, 732, 1641, 1594, 1593, 88, 88,
	1550, 607, 563, 565, 1512, 88, 1511, 1488, 887, 1483,
	1260, 726, 1416, 88, 1374, 548, 1540, 608, 889, 611,
	1529, 605, 1372, 1268, 1359, 921, 871, 871, 776, 603,
	790, 88, 1358, 793, 88, 1338, 477, 1294, 1191, 761,
	1039, 1042, 476, 1046, 1032, 1031, 1030, 1029, 625, 626,
	1523, 1524, 1359, 1028, 631, 1027, 309, 944, 1535, 1536,
	1537, 532, 520, 1534, 1532, 1533, 1525, 1526, 1527, 1528,
	1530, 1531, 1026, 1025, 1024, 1964, 1023, 1022, 766, 1021,
	1020, 1019, 1018, 1017, 797, 1016, 948, 949, 799, 1009,
	777, 998, 485, 780, 68, 1535, 1536, 1537, 914, 926,
	1534, 1532, 1533, 1525, 1526, 1527, 1528, 1530, 1531, 951,
	916, 502, 848, 633, 850, 567, 556, 554, 1961, 1867,
	852, 849, 1843, 1846, 846, 1842, 1816, 1815, 680, 1005,
	891, 1410, 950, 877, 884, 854, 883, 88, 1409, 896,
	996, 734, 1523, 1524, 523, 88, 575, 1441, 573, 88,
	1814, 1529, 1402, 1086, 1044, 912, 1130, 88, 88, 1045,
	913, 88, 1463, 1574, 1011, 1573, 928, 930, 88, 929,
	1467, 477, 593, 833, 477, 477, 942, 936, 576, 1625,
	937, 938, 88, 1158, 88, 88, 1014, 88, 574, 920,
	88, 1384, 88, 88, 1832, 88, 1094, 547, 1712, 1131,
	285, 1056, 1499, 853, 1008, 1282, 474, 597, 78, 1035,
	1396, 1581, 882, 881, 2047, 875, 872, 1001, 2006, 1074,
	1063, 893, 1077, 1114, 897, 898, 899, 900, 901, 2109,
	1527, 1528, 1530, 1531, 904, 905, 281, 751, 548, 1132,
	1129, 598, 1067, 1069, 2108, 308, 548, 1096, 1796, 1096,
	1040, 1036, 1037, 286, 545, 749, 1043, 1422, 1139, 459,
	65, 77, 460, 1925, 744, 65, 745, 1924, 1923, 1118,
	750, 1777, 465, 412, 464, 1047, 1807, 744, 1922, 745,
	1088, 1072, 1066, 1059, 282, 1609, 1608, 1578, 1577, 307,
	1470, 1415, 1080, 1084, 885, 1414, 88, 1413, 548, 548,
	1412, 1157, 549, 573, 1778, 1242, 308, 88, 88, 1134,
	483, 948, 949, 1120, 1100, 1119, 88, 88, 1137, 415,
	1121, 1083, 1109, 88, 734, 1152, 1082, 2005, 1115, 1110,
	1112, 1079, 1113, 604, 951, 513, 1055, 746, 1111, 540,
	420, 540, 1605, 574, 1342, 416, 1182, 1055, 88, 1341,
	746, 307, 840, 1054, 482, 1193, 744, 950, 745, 1525,
	1526, 1527, 1528, 1530, 1531, 1040, 1213, 1043, 886, 417,
	1612, 907, 469, 1065, 552, 1142, 1596, 834, 834, 1128,
	808, 808, 1257, 287, 1037, 1036, 307, 1212, 419, 470,
	1141, 76, 1257, 1614, 1773, 304, 1774, 1386, 772, 1906,
	958, 484, 754, 1264, 948, 949, 1282, 890, 1262, 583,
	475, 1314, 956, 566, 471, 948, 949, 288, 2054, 781,
	752, 594, 1265, 472, 1776, 79, 2108, 951, 1134, 746,
	1160, 1779, 2119, 284, 283, 753, 1379, 415, 951, 2125,
	64, 1633, 2070, 1156, 1390, 1159, 1185, 1186, 1161, 755,
	950, 1064, 1376, 88, 88, 88, 1531, 1344, 420, 88,
	1453, 950, 88, 416, 754, 2071, 42, 2130, 88, 88,
	88, 88, 88, 1630, 43, 1370, 787, 1194, 1421, 1456,
	88, 595, 752, 88, 88, 759, 758, 417, 418, 834,
	547, 1662, 808, 88, 481, 1279, 44, 753, 88, 1454,
	88, 906, 1775, 1993, 551, 956, 419, 88, 1423, 909,
	572, 1134, 776, 1631, 1394, 1352, 956, 88, 1033, 2118,
	1177, 548, 1269, 1266, 1597, 549, 1975, 876, 873, 596,
	1938, 638, 309, 549, 993, 747, 571, 421, 88, 88,
	485, 1290, 1371, 1346, 1664, 1373, 1309, 2079, 747, 547,
	1510, 1603, 834, 1390, 742, 808, 1204, 1211, 966, 1680,
	484, 1613, 1052, 2078, 2107, 2123, 1272, 833, 833, 966,
	1455, 2105, 88, 1276, 88, 621, 88, 1284, 1347, 1369,
	88, 1825, 1392, 1134, 88, 549, 549, 1398, 1301, 1301,
	1312, 1907, 1323, 309, 834, 730, 572, 808, 1335, 1336,
	1337, 871, 1404, 88, 1405, 1406, 418, 1179, 586, 71,
	2117, 1472, 1429, 308, 1431, 1385, 2124, 55, 1382, 561,
	1395, 1256, 954, 955, 957, 958, 967, 747, 2080, 1403,
	559, 2136, 1263, 1917, 2126, 73, 1916, 967, 620, 729,
	1899, 1144, 861, 1432, 2131, 485, 1792, 1435, 1882, 1407,
	1795, 1985, 1146, 788, 1580, 421, 65, 1794, 1420, 1741,
	1118, 1418, 1419, 621, 1466, 1424, 74, 1355, 1356, 1351,
	1180, 1147, 927, 918, 69, 308, 1629, 2081, 1852, 833,
	859, 70, 1145, 807, 2040, 620, 660, 903, 857, 1649,
	1827, 1900, 860, 1239, 530, 1361, 1360, 1501, 1840, 1659,
	1670, 1658, 1444, 485, 1120, 1447, 1119, 1465, 571, 1443,
	308, 1121, 960, 952, 953, 954, 955, 957, 958, 85,
	85, 279, 1433, 2135, 952, 953, 954, 955, 957, 958,
	529, 1408, 406, 407, 408, 482, 1791, 425, 1853, 1883,
	438, 1471, 833, 1473, 1742, 677, 612, 1793, 425, 438,
	1743, 1639, 1818, 1897, 1381, 1655, 491, 491, 1446, 1293,
	279, 1978, 485, 279, 279, 510, 279, 1487, 1881, 85,
	517, 1480, 1554, 1356, 1686, 1898, 1611, 1517, 1482, 1592,
	1387, 1498, 1591, 1138, 833, 1478, 1590, 1237, 1240, 1090,
	1078, 1075, 599, 592, 591, 590, 2074, 589, 588, 587,
	584, 88, 88, 528, 521, 1449, 1555, 1777, 549, 1620,
	1770, 1015, 895, 1292, 548, 1236, 2037, 1766, 1768, 1601,
	1599, 1579, 1772, 1437, 1183, 1457, 88, 1175, 1486, 88,
	1116, 88, 794, 792, 789, 784, 1489, 760, 88, 756,
	1778, 547, 1576, 1557, 1558, 1559, 748, 1645, 1475, 88,
	1700, 1439, 88, 1453, 1505, 1506, 1583, 1600, 1476, 1602,
	1771, 307, 1481, 88, 1932, 623, 1189, 1604, 2109, 495,
	578, 1642, 1456, 548, 81, 527, 1610, 1671, 526, 1650,
	1617, 879, 1055, 3, 1451, 1055, 1669, 1549, 1070, 1934,
	1615, 1068, 1454, 1651, 1622, 1621, 1623, 1672, 1562, 1618,
	309, 1071, 1689, 1238, 1632, 1634, 1635, 1452, 302, 25,
	1657, 88, 834, 1660, 1369, 808, 1640, 1705, 1706, 1707,
	1458, 582, 1839, 65, 1995, 1190, 1785, 2032, 1652, 1656,
	1773, 411, 1774, 458, 624, 1661, 1665, 1666, 496, 627,
	1606, 1076, 1607, 834, 834, 1073, 808, 808, 301, 24,
	2018, 579, 834, 834, 1823, 808, 808, 515, 1477, 503,
	1776, 518, 309, 1455, 519, 1479, 1178, 1779, 1696, 1174,
	1099, 279, 533, 279, 438, 438, 300, 23, 88, 88,
	88, 422, 1715, 943, 25, 834, 1699, 851, 808, 298,
	22, 1720, 461, 462, 1718, 88, 800, 309, 299, 11,
	88, 1713, 88, 1125, 88, 88, 88, 303, 10, 88,
	88, 2133, 547, 1592, 293, 9, 1591, 2134, 1790, 1786,
	1590, 2067, 292, 7, 24, 1748, 1838, 1749, 2021, 1675,
	1523, 1524, 1789, 294, 4, 1849, 1765, 468, 1775, 1761,
	948, 949, 1636, 1762, 88, 88, 1869, 948, 949, 948,
	949, 547, 23, 1150, 1149, 1627, 1693, 1569, 1411, 88,
	88, 1592, 1343, 88, 1591, 22, 1592, 1821, 1590, 1591,
	951, 547, 88, 1590, 11, 1340, 1848, 807, 807, 88,
	1819, 1339, 1289, 10, 1151, 1824, 950, 1806, 1812, 1828,
	9, 1002, 2053, 950, 1931, 1708, 557, 1830, 7, 1857,
	1434, 549, 833, 1829, 1012, 1822, 1861, 1813, 1010, 4,
	1905, 562, 88, 485, 438, 438, 834, 413, 1746, 808,
	1835, 1836, 1204, 1716, 1841, 894, 585, 1844, 545, 1756,
	1847, 1204, 1721, 833, 833, 1667, 2069, 1874, 1509, 1949,
	1974, 1291, 833, 833, 1013, 41, 1588, 654, 1767, 1582,
	836, 1169, 425, 935, 1168, 279, 310, 438, 610, 438,
	549, 613, 880, 676, 1752, 548, 865, 88, 874, 88,
	1300, 307, 88, 1205, 731, 833, 491, 678, 805, 679,
	88, 806, 1041, 666, 803, 308, 307, 279, 1103, 807,
	1261, 1880, 1280, 1497, 835, 1006, 646, 658, 657, 1277,
	553, 85, 1592, 1850, 54, 1591, 568, 1895, 432, 1590,
	279, 88, 1393, 847, 1809, 279, 279, 279, 1892, 782,
	1184, 931, 1910, 1893, 1834, 834, 88, 1927, 808, 547,
	1598, 473, 1908, 88, 1933, 1520, 555, 1321, 279, 279,
	1592, 88, 1909, 1591, 1313, 1911, 85, 1590, 85, 1310,
	606, 737, 807, 438, 994, 1253, 1935, 88, 88, 1940,
	1104, 1926, 580, 1399, 1959, 1124, 632, 1946, 1948, 1251,
	438, 438, 1965, 85, 438, 438, 438, 438, 438, 902,
	1967, 1947, 1968, 1973, 438, 438, 1956, 1952, 776, 1920,
	1921, 425, 1943, 939, 807, 494, 493, 1164, 88, 925,
	804, 577, 1955, 1980, 858, 1143, 833, 1989, 1523, 1524,
	987, 984, 463, 834, 1987, 1176, 808, 491, 1354, 2129,
	517, 1994, 1595, 88, 88, 2046, 1992, 1983, 72, 2003,
	1929, 1380, 1247, 29, 26, 88, 548, 21, 1984, 88,
	1248, 19, 1249, 1991, 18, 2012, 1254, 547, 2010, 28,
	17, 27, 15, 2013, 88, 14, 1913, 13, 12, 40,
	88, 39, 38, 37, 2022, 307, 88, 88, 36, 35,
	2027, 6, 5, 2, 2020, 548, 1, 2019, 2016, 2024,
	485, 0, 0, 0, 0, 0, 0, 2031, 2023, 88,
	2028, 88, 0, 0, 88, 548, 307, 0, 2034, 2015,
	0, 2025, 0, 0, 1919, 0, 0, 0, 834, 1529,
	0, 808, 0, 2057, 2042, 833, 2059, 2055, 88, 0,
	2058, 88, 0, 279, 0, 65, 1449, 2052, 0, 0,
	0, 1060, 2048, 2062, 1592, 279, 0, 1591, 2061, 2063,
	0, 1590, 1250, 279, 1081, 2065, 0, 279, 0, 1252,
	2043, 0, 549, 2060, 1087, 88, 0, 88, 0, 2084,
	0, 2091, 1539, 0, 2088, 0, 0, 0, 279, 2089,
	1107, 1108, 309, 279, 1453, 88, 279, 0, 438, 438,
	2090, 438, 0, 2102, 2093, 2106, 0, 2104, 0, 0,
	0, 2110, 0, 1456, 88, 308, 0, 0, 2115, 2112,
	2116, 2114, 0, 833, 0, 1451, 0, 0, 0, 0,
	308, 0, 0, 1454, 2128, 2127, 0, 2132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	1540, 0, 0, 0, 0, 2137, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 836, 0, 0, 0, 0,
	0, 0, 650, 548, 0, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2049, 2050, 2051, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1154, 0, 1455, 0, 0, 278, 835, 835,
	948, 949, 0, 279, 279, 0, 1523, 1524, 833, 0,
	2072, 0, 279, 1165, 0, 1523, 1524, 0, 0, 517,
	0, 0, 807, 951, 1534, 1532, 1533, 1525, 1526, 1527,
	1528, 1530, 1531, 549, 0, 0, 499, 0, 0, 506,
	509, 0, 499, 0, 279, 0, 950, 0, 0, 0,
	0, 0, 965, 807, 807, 0, 0, 0, 0, 0,
	0, 0, 807, 807, 0, 0, 836, 0, 0, 0,
	0, 0, 549, 0, 0, 0, 0, 1484, 1485, 0,
	0, 548, 1523, 1524, 0, 1541, 1542, 1543, 0, 948,
	949, 0, 549, 0, 0, 807, 0, 0, 1858, 308,
	0, 956, 0, 0, 804, 804, 0, 1529, 0, 0,
	835, 0, 951, 0, 0, 0, 1529, 636, 636, 0,
	0, 0, 0, 0, 1523, 1524, 739, 0, 0, 836,
	308, 0, 0, 0, 1538, 950, 0, 0, 1546, 1547,
	1548, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	1349, 1350, 0, 0, 966, 1060, 0, 0, 1357, 0,
	1539, 0, 0, 0, 1362, 1363, 1365, 1367, 1368, 1539,
	0, 836, 0, 835, 0, 0, 1375, 0, 0, 1377,
	279, 0, 0, 1529, 0, 0, 0, 0, 0, 279,
	956, 0, 309, 0, 279, 0, 1397, 1315, 1315, 0,
	0, 0, 0, 279, 0, 0, 0, 309, 0, 0,
	0, 0, 0, 279, 0, 835, 804, 0, 1544, 0,
	0, 0, 967, 0, 0, 1529, 807, 0, 1540, 0,
	0, 0, 0, 0, 1154, 1154, 1539, 1540, 0, 0,
	0, 0, 0, 0, 932, 934, 0, 499, 0, 509,
	549, 941, 0, 0, 0, 0, 0, 0, 1315, 1315,
	1315, 0, 0, 988, 989, 990, 991, 992, 925, 0,
	925, 0, 438, 1000, 0, 0, 279, 0, 1539, 804,
	1442, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1684, 1685, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 1540, 0, 961, 959, 960, 952,
	953, 954, 955, 957, 958, 1525, 1526, 1527, 1528, 1530,
	1531, 804, 1532, 1533, 1525, 1526, 1527, 1528, 1530, 1531,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1540, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 0, 1744, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1535, 1536, 1537, 309, 0, 1534, 1532,
	1533, 1525, 1526, 1527, 1528, 1530, 1531, 0, 952, 953,
	954, 955, 957, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1315, 1315, 0, 0, 309, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 0, 0,
	0, 499, 1533, 1525, 1526, 1527, 1528, 1530, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1587, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 1315, 1315, 1315,
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
	1315, 1315, 1315, 1315, 1315, 1315, 775, 1315, 0, 836,
	0, 499, 779, 779, 0, 0, 0, 279, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 506, 509, 0, 0, 807, 0,
	836, 836, 1637, 0, 0, 1060, 0, 925, 0, 836,
	836, 0, 0, 835, 1647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1679,
	0, 0, 836, 0, 835, 835, 0, 0, 0, 0,
	636, 655, 52, 835, 835, 0, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 0, 1241,
	1902, 1243, 1244, 1245, 1246, 0, 835, 1710, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 0, 0,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 478, 0, 804,
	486, 0, 1297, 1298, 0, 0, 1311, 52, 1322, 1324,
	1329, 1332, 1333, 1334, 0, 0, 0, 0, 0, 0,
	0, 948, 949, 0, 968, 969, 970, 978, 979, 980,
	804, 804, 0, 739, 1763, 1764, 1060, 971, 0, 804,
	804, 0, 0, 0, 951, 0, 0, 982, 0, 0,
	1587, 517, 0, 836, 0, 0, 1797, 0, 1798, 1048,
	279, 1800, 1801, 1977, 0, 1804, 279, 950, 0, 0,
	0, 499, 804, 965, 0, 0, 304, 0, 1391, 509,
	1315, 0, 0, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 1587, 0,
	517, 1165, 0, 1587, 1105, 0, 0, 0, 0, 509,
	0, 0, 509, 0, 0, 279, 279, 0, 0, 279,
	1417, 64, 956, 0, 0, 0, 0, 0, 1679, 0,
	0, 0, 0, 0, 0, 1855, 0, 0, 0, 0,
	0, 975, 983, 0, 0, 0, 0, 42, 0, 0,
	948, 949, 0, 0, 0, 43, 0, 981, 0, 0,
	2033, 0, 836, 0, 0, 0, 0, 0, 1875, 973,
	0, 941, 0, 951, 0, 966, 0, 44, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 0, 0,
	972, 0, 0, 804, 0, 0, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1468, 1469, 486, 1060, 0, 1894, 1474, 0, 1896, 1155,
	509, 0, 0, 0, 0, 0, 279, 0, 499, 1587,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	836, 956, 0, 0, 0, 0, 0, 976, 0, 1493,
	0, 0, 0, 0, 1928, 0, 1500, 517, 0, 1504,
	1199, 0, 0, 0, 0, 0, 0, 1587, 1513, 0,
	1315, 0, 279, 0, 0, 0, 0, 0, 0, 1951,
	71, 0, 0, 0, 835, 0, 0, 279, 55, 0,
	0, 0, 0, 1000, 966, 0, 0, 0, 0, 1329,
	1329, 1329, 804, 517, 1679, 0, 73, 0, 0, 974,
	0, 0, 962, 963, 964, 977, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 0, 0,
	0, 0, 1584, 1888, 0, 836, 0, 74, 0, 0,
	0, 0, 0, 0, 925, 69, 0, 0, 0, 0,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 636, 1348, 0, 0, 0, 1996,
	1997, 290, 0, 0, 0, 0, 739, 0, 0, 835,
	0, 2008, 0, 0, 0, 2009, 0, 0, 0, 0,
	804, 0, 0, 0, 0, 0, 1378, 0, 0, 0,
	517, 0, 0, 0, 0, 1388, 1679, 0, 0, 478,
	775, 0, 1679, 517, 0, 0, 0, 0, 0, 775,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 499,
	0, 0, 0, 0, 0, 2041, 0, 517, 0, 0,
	279, 1682, 0, 0, 1683, 0, 961, 959, 960, 952,
	953, 954, 955, 957, 958, 0, 1688, 0, 0, 0,
	0, 1587, 0, 0, 1951, 1697, 0, 1679, 0, 0,
	0, 0, 0, 1701, 948, 949, 1417, 968, 969, 970,
	978, 979, 980, 0, 0, 804, 0, 0, 0, 0,
	971, 1717, 1436, 0, 0, 1719, 0, 951, 0, 0,
	982, 279, 0, 517, 0, 0, 0, 0, 1523, 1524,
	0, 1541, 1542, 1543, 0, 1199, 0, 0, 0, 0,
	950, 2103, 0, 0, 1691, 0, 965, 0, 1750, 1751,
	0, 0, 0, 0, 0, 0, 0, 1757, 1758, 1759,
	1679, 0, 0, 0, 478, 0, 0, 478, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1538, 0, 0, 1787, 0, 0, 0, 0, 0, 997,
	0, 999, 0, 0, 0, 956, 0, 0, 1003, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 983, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1529,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 966, 1833,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 1523, 1524, 0, 1541, 1542, 1543,
	1860, 0, 1539, 0, 1863, 1864, 0, 0, 0, 1866,
	1690, 0, 52, 0, 0, 52, 1868, 0, 1870, 0,
	0, 0, 0, 0, 0, 0, 1876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	52, 0, 52, 0, 0, 0, 1538, 0, 0, 0,
	976, 0, 0, 1105, 1199, 0, 0, 52, 0, 1885,
	0, 0, 52, 0, 0, 0, 0, 0, 0, 0,
	1540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1529, 0, 0, 0, 0,
	0, 1199, 0, 0, 1199, 0, 0, 0, 1918, 0,
	0, 0, 974, 0, 0, 962, 963, 964, 977, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	1544, 0, 0, 0, 0, 0, 1565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1539, 1535,
	1536, 1537, 0, 1954, 1534, 1532, 1533, 1525, 1526, 1527,
	1528, 1530, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1969, 1970, 0, 0, 0, 0, 948, 949,
	0, 968, 969, 970, 978, 979, 980, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 951, 1982, 0, 982, 0, 0, 0, 0, 1200,
	0, 0, 0, 0, 0, 1986, 1540, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	965, 0, 948, 949, 0, 968, 969, 970, 978, 979,
	980, 0, 0, 0, 0, 1259, 0, 0, 971, 0,
	0, 739, 0, 0, 0, 951, 1799, 0, 982, 0,
	0, 0, 1805, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 956,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1535, 1536, 1537, 975, 983,
	1534, 1532, 1533, 1525, 1526, 1527, 1528, 1530, 1531, 0,
	0, 1199, 1199, 0, 981, 1199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 966, 956, 0, 52, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 983, 0, 0, 0, 972, 0, 486,
	0, 2085, 0, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 2101, 2101, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 2101, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1903, 0, 0, 0, 52, 0, 0, 0,
	52, 0, 0, 0, 0, 0, 0, 2101, 0, 0,
	0, 0, 0, 52, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 1945, 962,
	963, 964, 977, 0, 961, 959, 960, 952, 953, 954,
	955, 957, 958, 1199, 0, 0, 0, 0, 0, 0,
	1564, 0, 1259, 948, 949, 0, 968, 969, 970, 978,
	979, 980, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 999, 0, 0, 0, 951, 0, 0, 982,
	974, 0, 0, 962, 963, 964, 977, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 0, 950,
	0, 0, 0, 0, 1563, 965, 0, 948, 949, 0,
	968, 969, 970, 978, 979, 980, 439, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	951, 999, 0, 982, 440, 0, 1523, 1524, 0, 1541,
	1542, 1543, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 956, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 0,
	0, 444, 0, 975, 983, 0, 449, 450, 0, 0,
	455, 0, 0, 0, 0, 0, 0, 0, 1538, 981,
	0, 0, 443, 445, 0, 0, 2045, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 966, 956, 0,
	0, 0, 0, 1200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 983, 0,
	0, 446, 972, 0, 0, 0, 0, 1529, 0, 0,
	0, 0, 0, 981, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 1105, 0, 0,
	1200, 966, 451, 1200, 0, 0, 0, 0, 0, 0,
	52, 0, 1544, 0, 0, 967, 948, 949, 0, 968,
	969, 970, 978, 979, 980, 0, 972, 0, 0, 976,
	1539, 0, 971, 0, 0, 0, 0, 0, 0, 951,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 0, 0, 0, 0, 965, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 442, 962, 963, 964, 977, 1540, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 0,
	0, 0, 0, 0, 0, 1515, 452, 956, 457, 0,
	0, 0, 453, 0, 0, 0, 0, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 983, 0, 0,
	0, 456, 0, 0, 0, 974, 0, 0, 962, 963,
	964, 977, 981, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 31, 0, 973, 0, 2038, 0, 0, 0,
	966, 52, 0, 32, 56, 0, 0, 1535, 1536, 1537,
	0, 0, 1534, 1532, 1533, 1525, 1526, 1527, 1528, 1530,
	1531, 0, 0, 0, 0, 972, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 34, 0, 64, 0, 0,
	1200, 1200, 0, 0, 1200, 0, 0, 0, 0, 0,
	0, 0, 486, 0, 0, 0, 47, 0, 0, 0,
	0, 0, 0, 42, 0, 0, 59, 0, 967, 0,
	46, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 48, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 962, 963, 964,
	977, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 0, 0, 2036, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 62, 33, 0, 0, 49, 1936, 60, 0, 0,
	0, 0, 50, 0, 0, 52, 71, 0, 0, 0,
	0, 53, 0, 0, 55, 0, 0, 0, 0, 0,
	0, 0, 1200, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 999,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 90, 91, 325, 92, 326, 327, 328,
	329, 226, 330, 331, 332, 333, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 334, 97, 233, 234,
	98, 335, 336, 235, 236, 237, 337, 99, 238, 338,
	311, 339, 100, 101, 102, 0, 103, 340, 104, 105,
	106, 341, 312, 107, 108, 342, 343, 344, 345, 346,
	347, 109, 110, 280, 111, 239, 112, 240, 241, 348,
	113, 349, 114, 350, 351, 352, 115, 116, 353, 117,
	354, 0, 355, 242, 118, 119, 243, 244, 356, 357,
	358, 120, 121, 245, 0, 122, 359, 123, 360, 361,
	313, 362, 124, 246, 363, 247, 364, 125, 126, 127,
	128, 248, 249, 315, 365, 132, 366, 129, 367, 314,
	130, 250, 131, 251, 252, 253, 368, 254, 369, 316,
	133, 317, 134, 135, 370, 137, 136, 371, 255, 318,
	138, 319, 372, 139, 373, 374, 140, 0, 141, 142,
	143, 145, 256, 144, 320, 146, 147, 149, 148, 375,
	376, 377, 257, 150, 258, 151, 152, 378, 153, 379,
	380, 154, 381, 382, 155, 259, 321, 156, 322, 260,
	157, 158, 159, 160, 383, 261, 161, 262, 162, 384,
	163, 164, 165, 263, 166, 167, 385, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 386, 179,
	323, 180, 181, 264, 182, 0, 186, 187, 188, 189,
	387, 265, 190, 191, 388, 192, 183, 184, 193, 324,
	194, 266, 267, 195, 389, 201, 196, 197, 185, 198,
	200, 268, 199, 269, 390, 202, 391, 203, 204, 205,
	206, 207, 392, 270, 271, 272, 393, 394, 208, 273,
	274, 395, 209, 210, 211, 212, 396, 397, 213, 214,
	215, 398, 216, 399, 217, 218, 219, 275, 276, 400,
	401, 220, 402, 403, 404, 405, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 1673,
	0, 0, 0, 0, 0, 0, 0, 1674, 90, 91,
	325, 92, 326, 327, 328, 329, 226, 330, 331, 332,
	333, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 334, 97, 233, 234, 98, 335, 336, 235, 236,
	237, 337, 99, 238, 338, 311, 339, 100, 101, 102,
	0, 103, 340, 104, 105, 106, 341, 312, 107, 108,
	342, 343, 344, 345, 346, 347, 109, 110, 280, 111,
	239, 112, 240, 241, 348, 113, 349, 114, 350, 351,
	352, 115, 116, 353, 117, 354, 0, 355, 242, 118,
	119, 243, 244, 356, 357, 358, 120, 121, 245, 0,
	122, 359, 123, 360, 361, 313, 362, 124, 246, 363,
	247, 364, 125, 126, 127, 128, 248, 249, 315, 365,
	132, 366, 129, 367, 314, 130, 250, 131, 251, 252,
	253, 368, 254, 369, 316, 133, 317, 134, 135, 370,
	137, 136, 371, 255, 318, 138, 319, 372, 139, 373,
	374, 140, 0, 141, 142, 143, 145, 256, 144, 320,
	146, 147, 149, 148, 375, 376, 377, 257, 150, 258,
	151, 152, 378, 153, 379, 380, 154, 381, 382, 155,
	259, 321, 156, 322, 260, 157, 158, 159, 160, 383,
	261, 161, 262, 162, 384, 163, 164, 165, 263, 166,
	167, 385, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 386, 179, 323, 180, 181, 264, 182,
	0, 186, 187, 188, 189, 387, 265, 190, 191, 388,
	192, 183, 184, 193, 324, 194, 266, 267, 195, 389,
	201, 196, 197, 185, 198, 200, 268, 199, 269, 390,
	202, 391, 203, 204, 205, 206, 207, 392, 270, 271,
	272, 393, 394, 208, 273, 274, 395, 209, 210, 211,
	212, 396, 397, 213, 214, 215, 398, 216, 399, 217,
	218, 219, 275, 276, 400, 401, 220, 402, 403, 404,
	405, 221, 222, 223, 224, 225, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2026, 90, 91, 325, 92, 326,
	327, 328, 329, 226, 330, 331, 332, 333, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 334, 97,
	233, 234, 98, 335, 336, 235, 236, 237, 337, 99,
	238, 338, 311, 339, 100, 101, 102, 0, 103, 340,
	104, 105, 106, 341, 312, 107, 108, 342, 343, 344,
	345, 346, 347, 109, 110, 280, 111, 239, 112, 240,
	241, 348, 113, 349, 114, 350, 351, 352, 115, 116,
	353, 117, 354, 0, 355, 242, 118, 119, 243, 244,
	356, 357, 358, 120, 121, 245, 0, 122, 359, 123,
	360, 361, 313, 362, 124, 246, 363, 247, 364, 125,
	126, 127, 128, 248, 249, 315, 365, 132, 366, 129,
	367, 314, 130, 250, 131, 251, 252, 253, 368, 254,
	369, 316, 133, 317, 134, 135, 370, 137, 136, 371,
	255, 318, 138, 319, 372, 139, 373, 374, 140, 0,
	141, 142, 143, 145, 256, 144, 320, 146, 147, 149,
	148, 375, 376, 377, 257, 150, 258, 151, 152, 378,
	153, 379, 380, 154, 381, 382, 155, 259, 321, 156,
	322, 260, 157, 158, 159, 160, 383, 261, 161, 262,
	162, 384, 163, 164, 165, 263, 166, 167, 385, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	386, 179, 323, 180, 181, 264, 182, 0, 186, 187,
	188, 189, 387, 265, 190, 191, 388, 192, 183, 184,
	193, 324, 194, 266, 267, 195, 389, 201, 196, 197,
	185, 198, 200, 268, 199, 269, 390, 202, 391, 203,
	204, 205, 206, 207, 392, 270, 271, 272, 393, 394,
	208, 273, 274, 395, 209, 210, 211, 212, 396, 397,
	213, 214, 215, 398, 216, 399, 217, 218, 219, 275,
	276, 400, 401, 220, 402, 403, 404, 405, 221, 222,
	223, 224, 225, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 769, 0, 0, 90,
	91, 325, 92, 326, 327, 328, 329, 226, 330, 331,
	332, 333, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 334, 97, 233, 234, 98, 335, 336, 235,
	236, 237, 337, 99, 238, 338, 311, 339, 100, 101,
	102, 0, 103, 340, 104, 105, 106, 341, 312, 107,
	108, 342, 343, 344, 345, 346, 347, 109, 110, 280,
	111, 239, 112, 240, 241, 348, 113, 349, 114, 350,
	351, 352, 115, 116, 353, 117, 354, 0, 355, 242,
	118, 119, 243, 244, 356, 357, 358, 120, 121, 245,
	0, 122, 359, 123, 360, 361, 313, 362, 124, 246,
	363, 247, 364, 125, 126, 127, 128, 248, 249, 315,
	365, 132, 366, 129, 367, 314, 130, 250, 131, 251,
	252, 253, 368, 254, 369, 316, 133, 317, 134, 135,
	370, 137, 136, 371, 255, 318, 138, 319, 372, 139,
	373, 374, 140, 0, 141, 142, 143, 145, 256, 144,
	320, 146, 147, 149, 148, 375, 376, 377, 257, 150,
	258, 151, 152, 378, 153, 379, 380, 154, 381, 382,
	155, 259, 321, 156, 322, 260, 157, 158, 159, 160,
	383, 261, 161, 262, 162, 384, 163, 164, 165, 263,
	166, 167, 385, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 386, 179, 323, 180, 181, 264,
	182, 0, 186, 187, 188, 189, 387, 265, 190, 191,
	388, 192, 183, 184, 193, 324, 194, 266, 267, 195,
	389, 201, 196, 197, 185, 198, 200, 268, 199, 269,
	390, 202, 391, 203, 204, 205, 206, 207, 392, 270,
	271, 272, 393, 394, 208, 273, 274, 395, 209, 210,
	211, 212, 396, 397, 213, 214, 215, 398, 216, 399,
	217, 218, 219, 275, 276, 400, 401, 220, 402, 403,
	404, 405, 221, 222, 223, 224, 225, 674, 663, 664,
	661, 662, 653, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 690, 656, 0, 0, 0, 93, 94, 95, 227,
	705, 229, 706, 96, 707, 708, 0, 97, 233, 234,
	98, 659, 689, 709, 710, 237, 0, 99, 701, 0,
	682, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 312, 107, 108, 0, 683, 685, 0, 684,
	686, 109, 110, 280, 111, 711, 112, 712, 713, 740,
	113, 0, 114, 0, 0, 0, 704, 116, 0, 117,
	0, 0, 0, 647, 118, 119, 691, 692, 670, 0,
	0, 120, 121, 714, 0, 122, 0, 123, 0, 0,
	313, 0, 124, 702, 0, 247, 0, 125, 126, 127,
	128, 698, 700, 315, 0, 132, 0, 129, 0, 314,
	130, 715, 131, 716, 717, 718, 0, 681, 0, 316,
	133, 317, 134, 135, 0, 137, 136, 0, 703, 318,
	138, 319, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 256, 144, 320, 146, 147, 149, 148, 642,
	0, 671, 699, 150, 719, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 259, 321, 156, 322, 693,
	157, 158, 159, 160, 0, 694, 161, 262, 162, 0,
	163, 164, 165, 720, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	323, 180, 181, 648, 182, 0, 186, 187, 188, 189,
	71, 265, 190, 191, 687, 192, 183, 184, 193, 324,
	194, 721, 267, 195, 0, 201, 196, 197, 185, 198,
	200, 722, 199, 695, 0, 202, 73, 203, 204, 205,
	206, 207, 0, 270, 723, 724, 0, 0, 208, 696,
	697, 669, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 688, 216, 0, 217, 218, 219, 550, 725, 0,
	0, 220, 0, 0, 0, 69, 221, 222, 223, 224,
	225, 643, 70, 0, 0, 0, 0, 641, 0, 0,
	0, 0, 639, 640, 674, 663, 664, 661, 662, 653,
	0, 649, 0, 0, 0, 0, 652, 0, 0, 0,
	90, 91, 1286, 92, 0, 0, 0, 0, 690, 656,
	0, 0, 0, 93, 94, 95, 227, 705, 229, 706,
	96, 707, 708, 0, 97, 233, 234, 98, 659, 689,
	709, 710, 237, 0, 99, 701, 0, 682, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 312,
	107, 108, 0, 683, 685, 0, 684, 686, 109, 110,
	280, 111, 711, 112, 712, 713, 0, 113, 0, 114,
	0, 1287, 0, 704, 116, 0, 117, 0, 0, 0,
	647, 118, 119, 691, 692, 670, 0, 0, 120, 121,
	714, 0, 122, 0, 123, 0, 0, 313, 0, 124,
	702, 0, 247, 0, 125, 126, 127, 128, 698, 700,
	315, 0, 132, 0, 129, 0, 314, 130, 715, 131,
	716, 717, 718, 0, 681, 0, 316, 133, 317, 134,
	135, 0, 137, 136, 0, 703, 318, 138, 319, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 320, 146, 147, 149, 148, 642, 0, 671, 699,
	150, 719, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 321, 156, 322, 693, 157, 158, 159,
	160, 0, 694, 161, 262, 162, 0, 163, 164, 165,
	720, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 323, 180, 181,
	648, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 687, 192, 183, 184, 193, 324, 194, 721, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 722, 199,
	695, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 723, 724, 0, 0, 208, 696, 697, 669, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 688, 216,
	0, 217, 218, 219, 275, 725, 1285, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 643, 0,
	0, 0, 0, 0, 641, 0, 0, 0, 0, 639,
	640, 1288, 674, 663, 664, 661, 662, 653, 649, 1283,
	0, 0, 0, 652, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 690, 656, 0, 0,
	0, 93, 94, 95, 227, 705, 229, 706, 96, 707,
	708, 0, 97, 233, 234, 98, 659, 689, 709, 710,
	237, 0, 99, 701, 0, 682, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 108,
	0, 683, 685, 0, 684, 686, 109, 110, 280, 111,
	711, 112, 712, 713, 0, 113, 0, 114, 0, 0,
	0, 704, 116, 0, 117, 0, 0, 0, 647, 118,
	119, 691, 692, 670, 0, 0, 120, 121, 714, 0,
	122, 0, 123, 0, 0, 313, 0, 124, 702, 0,
	247, 0, 125, 126, 127, 128, 698, 700, 315, 0,
	132, 0, 129, 0, 314, 130, 715, 131, 716, 717,
	718, 0, 681, 0, 316, 133, 317, 134, 135, 0,
	137, 136, 0, 703, 318, 138, 319, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 320,
	146, 147, 149, 148, 642, 0, 671, 699, 150, 719,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 321, 156, 322, 693, 157, 158, 159, 160, 0,
	694, 161, 262, 162, 0, 163, 164, 165, 720, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 323, 180, 181, 648, 182,
	0, 186, 187, 188, 189, 71, 265, 190, 191, 687,
	192, 183, 184, 193, 324, 194, 721, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 722, 199, 695, 0,
	202, 73, 203, 204, 205, 206, 207, 0, 270, 723,
	724, 0, 0, 208, 696, 697, 669, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 688, 216, 0, 217,
	218, 219, 550, 725, 0, 0, 220, 0, 0, 0,
	69, 221, 222, 223, 224, 225, 643, 70, 0, 0,
	0, 0, 641, 0, 0, 0, 0, 639, 640, 674,
	663, 664, 661, 662, 653, 0, 649, 0, 0, 0,
	0, 652, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 690, 656, 0, 0, 0, 93, 94,
	95, 227, 705, 229, 706, 96, 707, 708, 1325, 97,
	233, 234, 98, 659, 689, 709, 710, 237, 0, 99,
	701, 0, 682, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 312, 107, 108, 0, 683, 685,
	0, 684, 686, 109, 110, 280, 111, 711, 112, 712,
	713, 0, 113, 0, 114, 0, 0, 0, 704, 116,
	0, 117, 0, 0, 0, 647, 118, 119, 691, 692,
	670, 0, 0, 120, 121, 714, 0, 122, 0, 123,
	0, 1330, 313, 0, 124, 702, 0, 247, 0, 125,
	126, 127, 128, 698, 700, 315, 0, 132, 0, 129,
	0, 314, 130, 715, 131, 716, 717, 718, 0, 681,
	0, 316, 133, 317, 134, 135, 0, 137, 136, 1326,
	703, 318, 138, 319, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 256, 144, 320, 146, 147, 149,
	148, 642, 0, 671, 699, 150, 719, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 259, 321, 156,
	322, 693, 157, 158, 159, 160, 0, 694, 161, 262,
	162, 0, 163, 164, 165, 720, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 323, 180, 181, 648, 182, 0, 186, 187,
	188, 189, 0, 265, 190, 191, 687, 192, 183, 184,
	193, 324, 194, 721, 267, 195, 0, 201, 196, 197,
	185, 198, 200, 722, 199, 695, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 270, 723, 724, 0, 1327,
	208, 696, 697, 669, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 688, 216, 0, 217, 218, 219, 275,
	725, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 643, 0, 0, 0, 0, 0, 641,
	0, 0, 0, 0, 639, 640, 674, 663, 664, 661,
	662, 653, 0, 649, 0, 0, 0, 0, 652, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	690, 656, 0, 0, 0, 93, 94, 95, 227, 705,
	229, 706, 96, 707, 708, 0, 97, 233, 234, 98,
	659, 689, 709, 710, 237, 0, 99, 701, 0, 682,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 312, 107, 108, 0, 683, 685, 0, 684, 686,
	109, 110, 280, 111, 711, 112, 712, 713, 0, 113,
	0, 114, 0, 0, 0, 704, 116, 0, 117, 0,
	0, 0, 647, 118, 119, 691, 692, 670, 0, 0,
	120, 121, 714, 0, 122, 0, 123, 0, 0, 313,
	0, 124, 702, 0, 247, 0, 125, 126, 127, 128,
	698, 700, 315, 0, 132, 0, 129, 0, 314, 130,
	715, 131, 716, 717, 718, 0, 681, 0, 316, 133,
	317, 134, 135, 0, 137, 136, 0, 703, 318, 138,
	319, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 320, 146, 147, 149, 148, 642, 1616,
	671, 699, 150, 719, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 321, 156, 322, 693, 157,
	158, 159, 160, 0, 694, 161, 262, 162, 0, 163,
	164, 165, 720, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 323,
	180, 181, 648, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 687, 192, 183, 184, 193, 324, 194,
	721, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	722, 199, 695, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 723, 724, 0, 0, 208, 696, 697,
	669, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	688, 216, 0, 217, 218, 219, 275, 725, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	643, 0, 0, 0, 0, 0, 641, 0, 0, 0,
	0, 639, 640, 637, 674, 663, 664, 661, 662, 653,
	649, 0, 0, 0, 0, 652, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 690, 656,
	0, 0, 0, 93, 94, 95, 227, 705, 229, 706,
	96, 707, 708, 0, 97, 233, 234, 98, 659, 689,
	709, 710, 237, 0, 99, 701, 0, 682, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 312,
	107, 108, 0, 683, 685, 0, 684, 686, 109, 110,
	280, 111, 711, 112, 712, 713, 0, 113, 0, 114,
	0, 0, 0, 704, 116, 0, 117, 0, 0, 0,
	647, 118, 119, 691, 692, 670, 0, 0, 120, 121,
	714, 0, 122, 0, 123, 0, 0, 313, 0, 124,
	702, 0, 247, 0, 125, 126, 127, 128, 698, 700,
	315, 0, 132, 0, 129, 0, 314, 130, 715, 131,
	716, 717, 718, 0, 681, 0, 316, 133, 317, 134,
	135, 0, 137, 136, 0, 703, 318, 138, 319, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 320, 146, 147, 149, 148, 642, 0, 671, 699,
	150, 719, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 321, 156, 322, 693, 157, 158, 159,
	160, 0, 694, 161, 262, 162, 0, 163, 164, 165,
	720, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 323, 180, 181,
	648, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 687, 192, 183, 184, 193, 324, 194, 721, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 722, 199,
	695, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 723, 724, 0, 0, 208, 696, 697, 669, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 688, 216,
	0, 217, 218, 219, 275, 725, 0, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 643, 0,
	0, 0, 0, 0, 641, 0, 0, 0, 0, 639,
	640, 0, 0, 0, 0, 0, 1005, 1278, 649, 0,
	0, 0, 0, 652, 674, 663, 664, 661, 662, 653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 690, 656,
	0, 0, 0, 93, 94, 95, 227, 705, 229, 706,
	96, 707, 708, 0, 97, 233, 234, 98, 659, 689,
	709, 710, 237, 0, 99, 701, 0, 682, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 312,
	107, 108, 0, 683, 685, 0, 684, 686, 109, 110,
	280, 111, 711, 112, 712, 713, 0, 113, 0, 114,
	0, 0, 0, 704, 116, 0, 117, 0, 0, 0,
	647, 118, 119, 691, 692, 670, 0, 0, 120, 121,
	714, 0, 122, 0, 123, 0, 0, 313, 0, 124,
	702, 0, 247, 0, 125, 126, 127, 128, 698, 700,
	315, 0, 132, 0, 129, 0, 314, 130, 715, 131,
	716, 717, 718, 0, 681, 0, 316, 133, 317, 134,
	135, 0, 137, 136, 0, 703, 318, 138, 319, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 320, 146, 147, 149, 148, 642, 0, 671, 699,
	150, 719, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 321, 156, 322, 693, 157, 158, 159,
	160, 0, 694, 161, 262, 162, 0, 163, 164, 165,
	720, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 323, 180, 181,
	648, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 687, 192, 183, 184, 193, 324, 194, 721, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 722, 199,
	695, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 723, 724, 0, 0, 208, 696, 697, 669, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 688, 216,
	0, 217, 218, 219, 275, 725, 0, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 643, 0,
	0, 0, 0, 0, 641, 0, 0, 0, 0, 639,
	640, 674, 663, 664, 661, 662, 653, 0, 649, 1747,
	0, 0, 0, 652, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 690, 656, 0, 0, 0,
	93, 94, 95, 227, 705, 229, 706, 96, 707, 708,
	0, 97, 233, 234, 98, 659, 689, 709, 710, 237,
	0, 99, 701, 0, 682, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 312, 107, 108, 0,
	683, 685, 0, 684, 686, 109, 110, 280, 111, 711,
	112, 712, 713, 0, 113, 0, 114, 0, 0, 0,
	704, 116, 0, 117, 0, 0, 0, 647, 118, 119,
	691, 692, 670, 0, 0, 120, 121, 714, 0, 122,
	0, 123, 0, 0, 313, 0, 124, 702, 0, 247,
	0, 125, 126, 127, 128, 698, 700, 315, 0, 132,
	0, 129, 0, 314, 130, 715, 131, 716, 717, 718,
	0, 681, 0, 316, 133, 317, 134, 135, 0, 137,
	136, 0, 703, 318, 138, 319, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 256, 144, 320, 146,
	147, 149, 148, 642, 0, 671, 699, 150, 719, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 259,
	321, 156, 322, 693, 157, 158, 159, 160, 0, 694,
	161, 262, 162, 0, 163, 164, 165, 720, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 323, 180, 181, 648, 182, 0,
	186, 187, 188, 189, 0, 265, 190, 191, 687, 192,
	183, 184, 193, 324, 194, 721, 267, 195, 0, 201,
	196, 197, 185, 198, 200, 722, 199, 695, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 270, 723, 724,
	0, 0, 208, 696, 697, 669, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 688, 216, 0, 217, 218,
	219, 275, 725, 1704, 0, 220, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 643, 0, 0, 0, 0,
	0, 641, 0, 0, 0, 0, 639, 640, 674, 663,
	664, 661, 662, 653, 0, 649, 0, 0, 0, 0,
	652, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 690, 656, 0, 0, 0, 93, 94, 95,
	227, 705, 229, 706, 96, 707, 708, 0, 97, 233,
	234, 98, 659, 689, 709, 710, 237, 0, 99, 701,
	0, 682, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 312, 107, 108, 0, 683, 685, 0,
	684, 686, 109, 110, 280, 111, 711, 112, 712, 713,
	0, 113, 0, 114, 0, 0, 0, 704, 116, 0,
	117, 0, 0, 0, 647, 118, 119, 691, 692, 670,
	0, 0, 120, 121, 714, 0, 122, 0, 123, 0,
	0, 313, 0, 124, 702, 0, 247, 0, 125, 126,
	127, 128, 698, 700, 315, 0, 132, 0, 129, 0,
	314, 130, 715, 131, 716, 717, 718, 0, 681, 0,
	316, 133, 317, 134, 135, 0, 137, 136, 0, 703,
	318, 138, 319, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 256, 144, 320, 146, 147, 149, 148,
	642, 0, 671, 699, 150, 719, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 259, 321, 156, 322,
	693, 157, 158, 159, 160, 0, 694, 161, 262, 162,
	0, 163, 164, 165, 720, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 323, 180, 181, 648, 182, 0, 186, 187, 188,
	189, 0, 265, 190, 191, 687, 192, 183, 184, 193,
	324, 194, 721, 267, 195, 0, 201, 196, 197, 185,
	198, 200, 722, 199, 695, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 270, 723, 724, 0, 0, 208,
	696, 697, 669, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 688, 216, 0, 217, 218, 219, 275, 725,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 643, 0, 0, 0, 0, 0, 641, 0,
	0, 0, 0, 639, 640, 674, 663, 664, 661, 662,
	653, 0, 649, 1694, 0, 0, 0, 652, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 690,
	656, 0, 0, 0, 93, 94, 95, 227, 705, 229,
	706, 96, 707, 708, 0, 97, 233, 234, 98, 659,
	689, 709, 710, 237, 0, 99, 701, 0, 682, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	312, 107, 108, 0, 683, 685, 0, 684, 686, 109,
	110, 280, 111, 711, 112, 712, 713, 740, 113, 0,
	114, 0, 0, 0, 704, 116, 0, 117, 0, 0,
	0, 647, 118, 119, 691, 692, 670, 0, 0, 120,
	121, 714, 0, 122, 0, 123, 0, 0, 313, 0,
	124, 702, 0, 247, 0, 125, 126, 127, 128, 698,
	700, 315, 0, 132, 0, 129, 0, 314, 130, 715,
	131, 716, 717, 718, 0, 681, 0, 316, 133, 317,
	134, 135, 0, 137, 136, 0, 703, 318, 138, 319,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	256, 144, 320, 146, 147, 149, 148, 642, 0, 671,
	699, 150, 719, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 259, 321, 156, 322, 693, 157, 158,
	159, 160, 0, 694, 161, 262, 162, 0, 163, 164,
	165, 720, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 323, 180,
	181, 648, 182, 0, 186, 187, 188, 189, 0, 265,
	190, 191, 687, 192, 183, 184, 193, 324, 194, 721,
	267, 195, 0, 201, 196, 197, 185, 198, 200, 722,
	199, 695, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 270, 723, 724, 0, 0, 208, 696, 697, 669,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 688,
	216, 0, 217, 218, 219, 275, 725, 0, 0, 220,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 643,
	0, 0, 0, 0, 0, 641, 0, 0, 0, 0,
	639, 640, 674, 663, 664, 661, 662, 653, 0, 649,
	0, 0, 0, 0, 652, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 690, 656, 0, 0,
	0, 93, 94, 95, 227, 705, 229, 706, 96, 707,
	708, 0, 97, 233, 234, 98, 659, 689, 709, 710,
	237, 0, 99, 701, 0, 682, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 108,
	0, 683, 685, 0, 684, 686, 109, 110, 280, 111,
	711, 112, 712, 713, 0, 113, 0, 114, 0, 0,
	0, 704, 116, 0, 117, 0, 0, 0, 647, 118,
	119, 691, 692, 670, 0, 0, 120, 121, 714, 0,
	122, 0, 123, 0, 1330, 313, 0, 124, 702, 0,
	247, 0, 125, 126, 127, 128, 698, 700, 315, 0,
	132, 0, 129, 0, 314, 130, 715, 131, 716, 717,
	718, 0, 681, 0, 316, 133, 317, 134, 135, 0,
	137, 136, 0, 703, 318, 138, 319, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 320,
	146, 147, 149, 148, 642, 0, 671, 699, 150, 719,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 321, 156, 322, 693, 157, 158, 159, 160, 0,
	694, 161, 262, 162, 0, 163, 164, 165, 720, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 323, 180, 181, 648, 182,
	0, 186, 187, 188, 189, 0, 265, 190, 191, 687,
	192, 183, 184, 193, 324, 194, 721, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 722, 199, 695, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 270, 723,
	724, 0, 0, 208, 696, 697, 669, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 688, 216, 0, 217,
	218, 219, 275, 725, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 643, 0, 0, 0,
	0, 0, 641, 0, 0, 0, 0, 639, 640, 674,
	663, 664, 661, 662, 653, 0, 649, 0, 0, 0,
	0, 652, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 690, 656, 0, 0, 0, 93, 94,
	95, 227, 705, 229, 706, 96, 707, 708, 0, 97,
	233, 234, 98, 659, 689, 709, 710, 237, 0, 99,
	701, 0, 682, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 312, 107, 108, 0, 683, 685,
	0, 684, 686, 109, 110, 280, 111, 711, 112, 712,
	713, 0, 113, 0, 114, 0, 0, 0, 704, 116,
	0, 117, 0, 0, 0, 647, 118, 119, 691, 692,
	670, 0, 0, 120, 121, 714, 0, 122, 0, 123,
	0, 0, 313, 0, 124, 702, 0, 247, 0, 125,
	126, 127, 128, 698, 700, 315, 0, 132, 0, 129,
	0, 314, 130, 715, 131, 716, 717, 718, 0, 681,
	0, 316, 133, 317, 134, 135, 0, 137, 136, 0,
	703, 318, 138, 319, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 256, 144, 320, 146, 147, 149,
	148, 642, 0, 671, 699, 150, 719, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 259, 321, 156,
	322, 693, 157, 158, 159, 160, 0, 694, 161, 262,
	162, 0, 163, 164, 165, 720, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 323, 180, 181, 648, 182, 0, 186, 187,
	188, 189, 0, 265, 190, 191, 687, 192, 183, 184,
	193, 324, 194, 721, 267, 195, 0, 201, 196, 197,
	185, 198, 200, 722, 199, 695, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 270, 723, 724, 0, 0,
	208, 696, 697, 669, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 688, 216, 0, 217, 218, 219, 275,
	725, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 643, 0, 0, 0, 0, 0, 641,
	0, 0, 0, 0, 639, 640, 674, 663, 664, 661,
	662, 653, 0, 649, 1273, 0, 0, 0, 652, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	690, 656, 0, 0, 0, 93, 94, 95, 227, 705,
	229, 706, 96, 707, 708, 0, 97, 233, 234, 98,
	659, 689, 709, 710, 237, 0, 99, 701, 0, 682,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 312, 107, 108, 0, 683, 685, 0, 684, 686,
	109, 110, 280, 111, 711, 112, 712, 713, 0, 113,
	0, 114, 0, 0, 0, 704, 116, 0, 117, 0,
	0, 0, 647, 118, 119, 691, 692, 670, 0, 0,
	120, 121, 714, 0, 122, 0, 123, 0, 0, 313,
	0, 124, 702, 0, 247, 0, 125, 126, 127, 128,
	698, 700, 315, 0, 132, 0, 129, 0, 314, 130,
	715, 131, 716, 717, 718, 0, 681, 0, 316, 133,
	317, 134, 135, 0, 137, 136, 0, 703, 318, 138,
	319, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 320, 146, 147, 149, 148, 642, 0,
	671, 699, 150, 719, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 321, 156, 322, 693, 157,
	158, 159, 160, 0, 694, 161, 262, 162, 0, 163,
	164, 165, 720, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 323,
	180, 181, 648, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 687, 192, 183, 184, 193, 324, 194,
	721, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	722, 199, 695, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 723, 724, 0, 0, 208, 696, 697,
	669, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	688, 216, 0, 217, 218, 219, 275, 725, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	643, 0, 0, 0, 0, 0, 641, 0, 0, 0,
	0, 639, 640, 637, 674, 663, 664, 661, 662, 653,
	649, 0, 0, 0, 0, 652, 0, 0, 0, 0,
	90, 91, 933, 92, 0, 0, 0, 0, 690, 656,
	0, 0, 0, 93, 94, 95, 227, 705, 229, 706,
	96, 707, 708, 0, 97, 233, 234, 98, 659, 689,
	709, 710, 237, 0, 99, 701, 0, 682, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 312,
	107, 108, 0, 683, 685, 0, 684, 686, 109, 110,
	280, 111, 711, 112, 712, 713, 0, 113, 0, 114,
	0, 0, 0, 704, 116, 0, 117, 0, 0, 0,
	647, 118, 119, 691, 692, 670, 0, 0, 120, 121,
	714, 0, 122, 0, 123, 0, 0, 313, 0, 124,
	702, 0, 247, 0, 125, 126, 127, 128, 698, 700,
	315, 0, 132, 0, 129, 0, 314, 130, 715, 131,
	716, 717, 718, 0, 681, 0, 316, 133, 317, 134,
	135, 0, 137, 136, 0, 703, 318, 138, 319, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 320, 146, 147, 149, 148, 642, 0, 671, 699,
	150, 719, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 321, 156, 322, 693, 157, 158, 159,
	160, 0, 694, 161, 262, 162, 0, 163, 164, 165,
	720, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 323, 180, 181,
	648, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 687, 192, 183, 184, 193, 324, 194, 721, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 722, 199,
	695, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 723, 724, 0, 0, 208, 696, 697, 669, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 688, 216,
	0, 217, 218, 219, 275, 725, 0, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 643, 0,
	0, 0, 0, 0, 641, 0, 0, 0, 0, 639,
	640, 674, 663, 664, 661, 662, 653, 0, 649, 0,
	0, 0, 0, 652, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 690, 656, 0, 0, 0,
	93, 94, 95, 227, 705, 229, 706, 96, 707, 708,
	0, 97, 233, 234, 98, 659, 689, 709, 710, 237,
	0, 99, 701, 0, 682, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 312, 107, 2100, 0,
	683, 685, 0, 684, 686, 109, 110, 280, 111, 711,
	112, 712, 713, 0, 113, 0, 114, 0, 0, 0,
	704, 116, 0, 117, 0, 0, 0, 647, 118, 119,
	691, 692, 670, 0, 0, 120, 121, 714, 0, 122,
	0, 123, 0, 0, 313, 0, 124, 702, 0, 247,
	0, 125, 126, 127, 128, 698, 700, 315, 0, 132,
	0, 129, 0, 314, 130, 715, 131, 716, 717, 718,
	0, 681, 0, 316, 133, 317, 134, 135, 0, 137,
	136, 0, 703, 318, 138, 319, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 256, 144, 320, 146,
	147, 149, 148, 642, 0, 671, 699, 150, 719, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 259,
	321, 156, 322, 693, 157, 158, 159, 160, 0, 694,
	161, 262, 162, 0, 163, 164, 165, 720, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 323, 180, 181, 648, 182, 0,
	186, 187, 188, 189, 0, 265, 190, 191, 687, 192,
	183, 184, 193, 324, 194, 721, 267, 195, 0, 201,
	196, 197, 185, 198, 200, 722, 199, 695, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 270, 723, 724,
	0, 0, 208, 696, 697, 669, 209, 210, 2099, 212,
	0, 0, 213, 214, 215, 688, 216, 0, 217, 218,
	219, 275, 725, 0, 0, 220, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 643, 0, 0, 0, 0,
	0, 641, 0, 0, 0, 0, 639, 640, 674, 663,
	664, 661, 662, 653, 0, 649, 0, 0, 0, 0,
	652, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 690, 656, 0, 0, 0, 93, 94, 95,
	2098, 705, 229, 706, 96, 707, 708, 0, 97, 233,
	234, 98, 659, 689, 709, 710, 237, 0, 99, 701,
	0, 682, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 312, 107, 2100, 0, 683, 685, 0,
	684, 686, 109, 110, 280, 111, 711, 112, 712, 713,
	0, 113, 0, 114, 0, 0, 0, 704, 116, 0,
	117, 0, 0, 0, 647, 118, 119, 691, 692, 670,
	0, 0, 120, 121, 714, 0, 122, 0, 123, 0,
	0, 313, 0, 124, 702, 0, 247, 0, 125, 126,
	127, 128, 698, 700, 315, 0, 132, 0, 129, 0,
	314, 130, 715, 131, 716, 717, 718, 0, 681, 0,
	316, 133, 317, 134, 135, 0, 137, 136, 0, 703,
	318, 138, 319, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 256, 144, 320, 146, 147, 149, 148,
	642, 0, 671, 699, 150, 719, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 259, 321, 156, 322,
	693, 157, 158, 159, 160, 0, 694, 161, 262, 162,
	0, 163, 164, 165, 720, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 323, 180, 181, 648, 182, 0, 186, 187, 188,
	189, 0, 265, 190, 191, 687, 192, 183, 184, 193,
	324, 194, 721, 267, 195, 0, 201, 196, 197, 185,
	198, 200, 722, 199, 695, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 270, 723, 724, 0, 0, 208,
	696, 697, 669, 209, 210, 2099, 212, 0, 0, 213,
	214, 215, 688, 216, 0, 217, 218, 219, 275, 725,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 643, 0, 0, 0, 0, 0, 641, 0,
	0, 0, 0, 639, 640, 674, 663, 664, 661, 662,
	653, 0, 649, 0, 0, 0, 0, 652, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 690,
	656, 0, 0, 0, 93, 94, 95, 227, 705, 229,
	706, 96, 707, 708, 0, 97, 233, 234, 98, 659,
	689, 709, 710, 237, 0, 99, 701, 0, 682, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	312, 107, 108, 0, 683, 685, 0, 684, 686, 109,
	110, 280, 111, 711, 112, 712, 713, 0, 113, 0,
	114, 0, 0, 0, 704, 116, 0, 117, 0, 0,
	0, 647, 118, 119, 691, 692, 670, 0, 0, 120,
	121, 714, 0, 122, 0, 123, 0, 0, 313, 0,
	124, 702, 0, 247, 0, 125, 126, 127, 128, 698,
	700, 315, 0, 132, 0, 129, 0, 314, 130, 715,
	131, 716, 717, 718, 0, 681, 0, 316, 133, 317,
	134, 135, 0, 137, 136, 0, 703, 318, 138, 319,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	256, 144, 320, 146, 147, 149, 148, 642, 0, 671,
	699, 150, 719, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 259, 321, 156, 322, 693, 157, 158,
	159, 160, 0, 694, 161, 262, 162, 0, 163, 164,
	165, 720, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 323, 180,
	181, 648, 182, 0, 186, 187, 188, 189, 0, 265,
	190, 191, 687, 192, 183, 184, 193, 324, 194, 721,
	267, 195, 0, 201, 196, 197, 185, 198, 200, 722,
	199, 695, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 270, 723, 724, 0, 0, 208, 696, 697, 669,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 688,
	216, 0, 217, 218, 219, 275, 725, 0, 0, 220,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 643,
	0, 0, 0, 0, 0, 641, 0, 0, 0, 0,
	639, 640, 1302, 663, 664, 661, 662, 653, 0, 649,
	0, 0, 0, 0, 652, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 690, 656, 0, 0,
	0, 93, 94, 95, 227, 705, 229, 706, 96, 707,
	708, 0, 97, 233, 234, 98, 659, 689, 709, 710,
	237, 0, 99, 701, 0, 682, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 108,
	0, 683, 685, 0, 684, 686, 109, 110, 280, 111,
	711, 1305, 712, 713, 0, 113, 0, 114, 0, 0,
	0, 704, 116, 0, 117, 0, 0, 0, 647, 118,
	119, 691, 692, 670, 0, 0, 120, 121, 714, 0,
	122, 0, 123, 0, 0, 313, 0, 124, 702, 0,
	247, 0, 125, 126, 1306, 128, 698, 700, 315, 0,
	132, 0, 129, 0, 314, 130, 715, 131, 716, 717,
	718, 0, 681, 0, 316, 133, 317, 134, 135, 0,
	137, 136, 0, 703, 318, 138, 319, 0, 139, 0,
	0, 140, 0, 141, 1307, 1304, 145, 256, 144, 320,
	146, 147, 149, 148, 642, 0, 671, 699, 150, 719,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 321, 156, 322, 693, 157, 158, 159, 160, 0,
	694, 161, 262, 162, 0, 163, 164, 165, 720, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 323, 180, 181, 648, 182,
	0, 186, 187, 188, 1308, 0, 265, 190, 191, 687,
	192, 183, 184, 193, 324, 194, 721, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 722, 199, 695, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 270, 723,
	724, 0, 0, 208, 696, 697, 669, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 688, 216, 0, 217,
	218, 219, 275, 725, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 1303, 225, 643, 0, 0, 0,
	0, 0, 641, 0, 0, 0, 0, 639, 640, 674,
	663, 664, 661, 662, 653, 0, 649, 0, 0, 0,
	0, 652, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 690, 656, 0, 0, 0, 93, 94,
	95, 227, 705, 229, 706, 96, 707, 708, 0, 97,
	233, 234, 98, 659, 689, 709, 710, 237, 0, 99,
	701, 0, 682, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 312, 107, 108, 0, 683, 685,
	0, 684, 686, 109, 110, 280, 111, 711, 112, 712,
	713, 0, 113, 0, 114, 0, 0, 0, 704, 116,
	0, 117, 0, 0, 0, 647, 118, 119, 691, 692,
	670, 0, 0, 120, 121, 714, 0, 122, 0, 123,
	0, 0, 313, 0, 124, 702, 0, 247, 0, 125,
	126, 127, 128, 698, 700, 315, 0, 132, 0, 129,
	0, 314, 130, 715, 131, 716, 717, 718, 0, 681,
	0, 316, 133, 317, 134, 135, 0, 137, 136, 0,
	703, 318, 138, 319, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 256, 144, 320, 146, 147, 149,
	148, 0, 0, 671, 699, 150, 719, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 259, 321, 156,
	322, 693, 157, 158, 159, 160, 0, 694, 161, 262,
	162, 0, 163, 164, 165, 720, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 323, 180, 181, 1320, 182, 0, 186, 187,
	188, 189, 0, 265, 190, 191, 687, 192, 183, 184,
	193, 324, 194, 721, 267, 195, 0, 201, 196, 197,
	185, 198, 200, 722, 199, 695, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 270, 723, 724, 0, 0,
	208, 696, 697, 669, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 688, 216, 0, 217, 218, 219, 275,
	725, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 1316, 1317, 674, 663, 664, 661,
	662, 653, 0, 1319, 0, 0, 0, 0, 652, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	690, 656, 0, 0, 0, 93, 94, 95, 227, 705,
	229, 706, 96, 707, 708, 0, 97, 233, 234, 98,
	0, 689, 709, 710, 237, 0, 99, 701, 0, 682,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 312, 107, 108, 0, 683, 685, 0, 684, 686,
	109, 110, 280, 111, 711, 112, 712, 713, 0, 113,
	0, 114, 0, 0, 0, 704, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 691, 692, 670, 0, 0,
	120, 121, 714, 0, 122, 0, 123, 0, 0, 313,
	0, 124, 702, 0, 247, 0, 125, 126, 127, 128,
	698, 700, 315, 0, 132, 0, 129, 0, 314, 130,
	715, 131, 716, 717, 718, 0, 681, 0, 316, 133,
	317, 134, 135, 0, 137, 136, 0, 703, 318, 138,
	319, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 320, 146, 147, 149, 148, 0, 0,
	671, 699, 150, 719, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 321, 156, 322, 693, 157,
	158, 159, 160, 0, 694, 161, 262, 162, 0, 163,
	164, 165, 720, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 323,
	180, 181, 1320, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 687, 192, 183, 184, 193, 324, 194,
	721, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	722, 199, 695, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 723, 724, 0, 0, 208, 696, 697,
	669, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	688, 216, 0, 217, 218, 219, 275, 725, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 0, 674, 663, 664, 661, 662, 653, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	1319, 92, 0, 0, 0, 652, 690, 656, 0, 0,
	0, 93, 94, 95, 0, 705, 229, 706, 96, 707,
	708, 0, 97, 233, 234, 98, 659, 689, 709, 710,
	237, 0, 99, 701, 0, 682, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 2100,
	0, 683, 685, 0, 684, 686, 109, 110, 280, 111,
	711, 112, 712, 713, 0, 113, 0, 114, 0, 0,
	0, 704, 116, 0, 117, 0, 0, 0, 647, 118,
	119, 691, 692, 670, 0, 0, 120, 121, 714, 0,
	122, 0, 123, 0, 0, 313, 0, 124, 702, 0,
	247, 0, 125, 126, 127, 128, 698, 700, 0, 0,
	132, 0, 129, 0, 314, 130, 715, 131, 716, 717,
	718, 0, 681, 0, 0, 133, 317, 134, 135, 0,
	137, 136, 0, 703, 318, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 320,
	146, 147, 149, 148, 642, 0, 671, 699, 150, 719,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 321, 156, 322, 693, 157, 158, 159, 160, 0,
	694, 161, 262, 162, 0, 163, 164, 165, 720, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 323, 180, 181, 648, 182,
	0, 186, 187, 188, 189, 0, 265, 190, 191, 687,
	192, 183, 184, 193, 0, 194, 721, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 722, 199, 695, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 270, 723,
	724, 0, 0, 208, 696, 697, 669, 209, 210, 2099,
	212, 0, 0, 213, 214, 215, 688, 216, 0, 217,
	218, 219, 275, 725, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 639, 640, 0,
	0, 0, 90, 91, 0, 92, 649, 0, 0, 0,
	690, 652, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 689, 235, 236, 237, 0, 99, 701, 0, 682,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 312, 107, 108, 0, 683, 685, 0, 684, 686,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 691, 692, 0, 0, 0,
	120, 121, 245, 0, 122, 0, 123, 0, 0, 313,
	0, 124, 702, 0, 247, 0, 125, 126, 127, 128,
	698, 700, 315, 0, 132, 0, 129, 0, 314, 130,
	250, 131, 251, 252, 253, 0, 254, 0, 316, 133,
	317, 134, 135, 0, 137, 136, 0, 703, 318, 138,
	319, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 320, 146, 147, 149, 148, 0, 0,
	0, 699, 150, 258, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 321, 156, 322, 693, 157,
	158, 159, 160, 0, 694, 161, 262, 162, 0, 163,
	164, 165, 263, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 323,
	180, 181, 264, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 687, 192, 183, 184, 193, 324, 194,
	266, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	268, 199, 695, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 271, 272, 0, 0, 208, 696, 697,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	688, 216, 0, 217, 218, 219, 275, 276, 0, 0,
	220, 0, 546, 0, 0, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	1589, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 311, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 243, 244, 0, 0, 0, 120, 121, 245, 0,
	122, 0, 123, 0, 0, 313, 0, 124, 246, 0,
	247, 0, 125, 126, 127, 128, 248, 249, 315, 0,
	132, 0, 129, 0, 314, 130, 250, 131, 251, 252,
	253, 0, 254, 0, 316, 133, 317, 134, 135, 0,
	137, 136, 0, 255, 318, 138, 319, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 320,
	146, 147, 149, 148, 0, 0, 0, 257, 150, 258,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 321, 156, 322, 260, 157, 158, 159, 160, 0,
	261, 161, 262, 162, 0, 163, 164, 165, 263, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 323, 180, 181, 264, 182,
	0, 186, 187, 188, 189, 71, 265, 190, 191, 0,
	192, 183, 184, 193, 324, 194, 266, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 268, 199, 269, 0,
	202, 73, 203, 204, 205, 206, 207, 0, 270, 271,
	272, 0, 0, 208, 273, 274, 0, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 550, 276, 0, 0, 220, 0, 0, 0,
	69, 221, 222, 223, 224, 225, 0, 70, 546, 765,
	0, 875, 872, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 68, 92, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 311, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 312, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 280, 111, 239, 112, 240, 241,
	878, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 243, 244, 869,
	0, 0, 120, 121, 245, 0, 122, 0, 123, 0,
	0, 313, 0, 124, 246, 0, 247, 0, 125, 126,
	127, 128, 248, 249, 315, 0, 132, 0, 129, 0,
	314, 130, 250, 131, 251, 252, 253, 0, 254, 0,
	316, 133, 317, 134, 135, 0, 137, 136, 0, 255,
	318, 138, 319, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 256, 144, 320, 146, 147, 149, 148,
	0, 0, 0, 257, 150, 258, 151, 152, 0, 153,
	870, 0, 154, 0, 0, 155, 259, 321, 156, 322,
	260, 157, 158, 159, 160, 0, 261, 161, 262, 162,
	0, 163, 164, 165, 263, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 323, 180, 181, 264, 182, 0, 186, 187, 188,
	189, 0, 265, 190, 191, 0, 192, 183, 184, 193,
	324, 194, 266, 267, 195, 0, 201, 196, 197, 185,
	198, 200, 268, 199, 269, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 270, 271, 272, 0, 0, 208,
	273, 274, 868, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 275, 276,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 546, 765, 0, 875, 872, 867, 0, 0,
	0, 0, 0, 876, 873, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 311, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 863, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 243, 244, 869, 0, 0, 120, 121, 245, 0,
	122, 0, 123, 0, 0, 313, 0, 124, 246, 0,
	247, 0, 125, 126, 127, 128, 248, 249, 315, 0,
	132, 0, 129, 0, 314, 130, 250, 131, 251, 252,
	253, 0, 254, 0, 316, 133, 317, 134, 135, 0,
	137, 136, 0, 255, 318, 138, 319, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 320,
	146, 147, 149, 148, 0, 0, 0, 257, 150, 258,
	151, 152, 0, 153, 870, 0, 154, 0, 0, 155,
	259, 321, 156, 322, 260, 157, 158, 159, 160, 0,
	261, 161, 262, 162, 0, 163, 164, 165, 263, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 323, 180, 181, 264, 182,
	0, 186, 187, 188, 189, 0, 265, 190, 191, 0,
	192, 183, 184, 193, 324, 194, 266, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 268, 199, 269, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 270, 271,
	272, 0, 0, 208, 273, 274, 868, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 275, 276, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 546, 765, 0, 875,
	872, 867, 0, 0, 0, 0, 0, 876, 873, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 311,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 312, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 243, 244, 869, 0, 0,
	120, 121, 245, 0, 122, 0, 123, 0, 0, 313,
	0, 124, 246, 0, 247, 0, 125, 126, 127, 128,
	248, 249, 315, 0, 132, 0, 129, 0, 314, 130,
	250, 131, 251, 252, 253, 0, 254, 0, 316, 133,
	317, 134, 135, 0, 137, 136, 0, 255, 318, 138,
	319, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 320, 146, 147, 149, 148, 0, 0,
	0, 257, 150, 258, 151, 152, 0, 153, 870, 0,
	154, 0, 0, 155, 259, 321, 156, 322, 260, 157,
	158, 159, 160, 0, 261, 161, 262, 162, 0, 163,
	164, 165, 263, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 323,
	180, 181, 264, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 0, 192, 183, 184, 193, 324, 194,
	266, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	268, 199, 269, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 271, 272, 0, 0, 208, 273, 274,
	868, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 275, 276, 0, 87,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 876, 873, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 280, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 243, 244,
	0, 0, 0, 120, 121, 245, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 246, 0, 247, 0, 125,
	126, 127, 128, 248, 249, 0, 0, 132, 0, 129,
	0, 0, 130, 250, 131, 251, 252, 253, 0, 254,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	255, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 256, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 257, 150, 258, 151, 152, 0,
	153, 0, 500, 154, 0, 0, 155, 259, 0, 156,
	0, 260, 157, 158, 159, 160, 0, 261, 161, 262,
	162, 0, 163, 164, 165, 263, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 264, 182, 0, 186, 187,
	188, 189, 71, 265, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 266, 267, 195, 0, 201, 196, 197,
	185, 198, 200, 268, 199, 269, 0, 202, 73, 203,
	204, 205, 206, 207, 0, 270, 271, 272, 0, 0,
	208, 273, 274, 0, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 550,
	276, 0, 0, 220, 0, 87, 0, 69, 221, 222,
	223, 224, 225, 0, 70, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 226,
	0, 1197, 0, 1202, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 280, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 243, 244, 0, 0, 0, 120,
	121, 245, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 246, 0, 247, 0, 125, 126, 127, 128, 248,
	249, 0, 0, 132, 0, 129, 0, 0, 130, 250,
	131, 251, 252, 253, 0, 254, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 255, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	256, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	257, 150, 258, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 259, 0, 156, 0, 260, 157, 158,
	159, 160, 0, 261, 161, 262, 162, 0, 163, 164,
	165, 263, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 264, 182, 0, 186, 187, 188, 189, 71, 265,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 266,
	267, 195, 0, 201, 196, 197, 185, 198, 200, 268,
	199, 269, 0, 202, 73, 203, 204, 205, 206, 207,
	0, 270, 271, 272, 0, 0, 208, 273, 274, 0,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 550, 276, 0, 0, 220,
	0, 87, 0, 69, 221, 222, 223, 224, 225, 0,
	70, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 226, 0, 0, 0, 68,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 280, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	243, 244, 0, 0, 0, 120, 121, 245, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 246, 0, 247,
	0, 125, 126, 127, 128, 248, 249, 0, 0, 132,
	0, 129, 0, 0, 130, 250, 131, 251, 252, 253,
	0, 254, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 255, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 256, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 257, 150, 258, 151,
	152, 0, 153, 0, 500, 154, 0, 0, 155, 259,
	0, 156, 0, 260, 157, 158, 159, 160, 0, 261,
	161, 262, 162, 0, 163, 164, 165, 263, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 264, 182, 0,
	186, 187, 188, 189, 0, 265, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 266, 267, 195, 0, 201,
	196, 197, 185, 198, 200, 268, 199, 269, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 270, 271, 272,
	0, 0, 208, 273, 274, 0, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 275, 276, 0, 0, 220, 0, 87, 0, 0,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 226, 0, 1197, 0, 1202, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 280, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 243, 244, 0, 0,
	0, 120, 121, 245, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 246, 0, 247, 0, 125, 126, 127,
	128, 248, 249, 0, 0, 132, 0, 129, 0, 0,
	130, 250, 131, 251, 252, 253, 0, 254, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 255, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 256, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 257, 150, 258, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 259, 0, 156, 0, 260,
	157, 158, 159, 160, 0, 261, 161, 262, 162, 0,
	163, 164, 165, 263, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 264, 182, 0, 186, 187, 188, 189,
	0, 265, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 266, 267, 195, 0, 201, 196, 197, 185, 198,
	200, 268, 199, 269, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 270, 271, 272, 0, 0, 208, 273,
	274, 0, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 275, 276, 0,
	0, 220, 0, 0, 87, 0, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 226, 0,
	0, 0, 773, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	280, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 243, 244, 0, 0, 0, 120, 121,
	245, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	246, 0, 247, 0, 125, 126, 127, 128, 248, 249,
	0, 0, 132, 0, 129, 0, 0, 130, 250, 131,
	251, 252, 253, 0, 254, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 255, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 257,
	150, 258, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 0, 156, 0, 260, 157, 158, 159,
	160, 0, 261, 161, 262, 162, 0, 163, 164, 165,
	263, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	264, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 266, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 268, 199,
	269, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 271, 272, 0, 0, 208, 273, 274, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 275, 276, 0, 0, 220, 0,
	87, 0, 0, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 226, 0, 0, 0, 1106, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 280, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 243,
	244, 0, 0, 0, 120, 121, 245, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 246, 0, 247, 0,
	125, 126, 127, 128, 248, 249, 0, 0, 132, 0,
	129, 0, 0, 130, 250, 131, 251, 252, 253, 0,
	254, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 255, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 256, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 257, 150, 258, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 259, 0,
	156, 0, 260, 157, 158, 159, 160, 0, 261, 161,
	262, 162, 0, 163, 164, 165, 263, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 264, 182, 0, 186,
	187, 188, 189, 0, 265, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 266, 267, 195, 0, 201, 196,
	197, 185, 198, 200, 268, 199, 269, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 270, 271, 272, 0,
	0, 208, 273, 274, 0, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	275, 276, 0, 0, 220, 0, 87, 0, 0, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 0, 0, 1711, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 243, 244, 0, 0, 0,
	120, 121, 245, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 246, 0, 247, 0, 125, 126, 127, 128,
	248, 249, 0, 0, 132, 0, 129, 0, 0, 130,
	250, 131, 251, 252, 253, 0, 254, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 255, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 257, 150, 258, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 0, 156, 0, 260, 157,
	158, 159, 160, 0, 261, 161, 262, 162, 0, 163,
	164, 165, 263, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 264, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	266, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	268, 199, 269, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 271, 272, 0, 0, 208, 273, 274,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 275, 276, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	674, 663, 664, 661, 662, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	736, 0, 0, 0, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 705, 229, 706, 96, 707, 708, 0,
	97, 233, 234, 98, 0, 0, 709, 710, 237, 0,
	99, 238, 0, 311, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 312, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 280, 111, 711, 112,
	712, 713, 0, 113, 0, 114, 0, 0, 0, 704,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 243,
	244, 670, 0, 0, 120, 121, 714, 0, 122, 0,
	123, 0, 0, 313, 0, 124, 246, 0, 247, 0,
	125, 126, 127, 128, 248, 249, 315, 0, 132, 0,
	129, 0, 314, 130, 715, 131, 716, 717, 718, 0,
	681, 0, 316, 133, 317, 134, 135, 0, 137, 136,
	0, 255, 318, 138, 319, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 256, 144, 320, 146, 147,
	149, 148, 0, 0, 671, 257, 150, 719, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 259, 321,
	156, 322, 260, 157, 158, 159, 160, 0, 261, 161,
	262, 162, 0, 163, 164, 165, 720, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 323, 180, 181, 264, 182, 0, 186,
	187, 188, 189, 0, 265, 190, 191, 0, 192, 183,
	184, 193, 324, 194, 721, 267, 195, 0, 201, 196,
	197, 185, 198, 200, 722, 199, 269, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 270, 723, 724, 0,
	0, 208, 273, 274, 669, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	275, 725, 546, 765, 220, 0, 0, 763, 0, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 311, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 312, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 243, 244, 0, 0, 0, 120, 121, 245, 0,
	122, 0, 123, 0, 0, 313, 0, 124, 246, 0,
	247, 0, 125, 126, 127, 128, 248, 249, 315, 0,
	132, 0, 129, 0, 314, 130, 250, 131, 251, 252,
	253, 0, 254, 0, 316, 133, 317, 134, 135, 0,
	137, 136, 0, 255, 318, 138, 319, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 320,
	146, 147, 149, 148, 0, 0, 0, 257, 150, 258,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 321, 156, 322, 260, 157, 158, 159, 160, 0,
	261, 161, 262, 162, 0, 163, 164, 165, 263, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 323, 180, 181, 264, 182,
	0, 186, 187, 188, 189, 0, 265, 190, 191, 0,
	192, 183, 184, 193, 324, 194, 266, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 268, 199, 269, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 270, 271,
	272, 0, 0, 208, 273, 274, 0, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 275, 276, 87, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	83, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 243, 244, 0, 0, 0, 120, 121,
	245, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	246, 0, 247, 0, 125, 126, 127, 128, 248, 249,
	0, 0, 132, 0, 129, 0, 0, 130, 250, 131,
	251, 252, 253, 0, 254, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 255, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 257,
	150, 258, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 0, 156, 0, 260, 157, 158, 159,
	160, 0, 261, 161, 262, 162, 0, 163, 164, 165,
	263, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	264, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 266, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 268, 199,
	269, 0, 202, 82, 203, 204, 205, 206, 207, 0,
	270, 271, 272, 0, 0, 208, 273, 274, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 275, 276, 546, 765, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 86, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 311,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 312, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 243, 244, 0, 0, 0,
	120, 121, 245, 0, 122, 0, 123, 0, 0, 313,
	0, 124, 246, 0, 247, 0, 125, 126, 127, 128,
	248, 249, 315, 0, 132, 0, 129, 0, 314, 130,
	250, 131, 251, 252, 253, 0, 254, 0, 316, 133,
	317, 134, 135, 0, 137, 136, 0, 255, 318, 138,
	319, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 320, 146, 147, 149, 148, 0, 0,
	0, 257, 150, 258, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 321, 156, 322, 260, 157,
	158, 159, 160, 0, 261, 161, 262, 162, 0, 163,
	164, 165, 263, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 323,
	180, 181, 264, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 0, 192, 183, 184, 193, 324, 194,
	266, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	268, 199, 269, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 271, 272, 0, 0, 208, 273, 274,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 275, 276, 87, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 280, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 243, 244, 0,
	0, 0, 120, 121, 245, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 246, 0, 247, 0, 125, 126,
	127, 128, 248, 249, 0, 0, 132, 0, 129, 0,
	0, 130, 250, 131, 251, 252, 253, 0, 254, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 255,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 256, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 257, 150, 258, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 259, 0, 156, 0,
	260, 157, 158, 159, 160, 0, 261, 161, 262, 162,
	0, 163, 164, 165, 263, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 264, 182, 0, 186, 187, 188,
	189, 0, 265, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 266, 267, 195, 0, 201, 196, 197, 185,
	198, 200, 268, 199, 269, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 270, 271, 272, 0, 0, 208,
	273, 274, 0, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 275, 276,
	546, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 226, 86, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 311, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 312, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 280, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 243,
	244, 0, 0, 0, 120, 121, 245, 0, 122, 0,
	123, 0, 0, 313, 0, 124, 246, 0, 247, 0,
	125, 126, 127, 128, 248, 249, 315, 0, 132, 0,
	129, 0, 314, 130, 250, 131, 251, 252, 253, 0,
	254, 0, 316, 133, 317, 134, 135, 0, 137, 136,
	0, 255, 318, 138, 319, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 256, 144, 320, 146, 147,
	149, 148, 0, 0, 0, 257, 150, 258, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 259, 321,
	156, 322, 260, 157, 158, 159, 160, 0, 261, 161,
	262, 162, 0, 163, 164, 165, 263, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 323, 180, 181, 264, 182, 0, 186,
	187, 188, 189, 0, 265, 190, 191, 0, 192, 183,
	184, 193, 324, 194, 266, 267, 195, 0, 201, 196,
	197, 185, 198, 200, 268, 199, 269, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 270, 271, 272, 0,
	0, 208, 273, 274, 0, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	275, 276, 87, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 1063, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 1061, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 243, 244, 0, 1173, 0, 120, 121, 245, 0,
	122, 0, 123, 1066, 0, 0, 0, 124, 246, 0,
	247, 0, 125, 126, 127, 128, 248, 249, 0, 0,
	132, 1171, 129, 0, 0, 130, 250, 131, 251, 252,
	253, 0, 254, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 255, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 257, 150, 258,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 0, 156, 0, 260, 157, 158, 159, 160, 0,
	261, 161, 262, 162, 1065, 163, 164, 165, 263, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 264, 182,
	0, 186, 187, 188, 189, 0, 265, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 266, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 268, 199, 269, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 270, 271,
	272, 0, 0, 208, 273, 274, 0, 209, 210, 211,
	212, 0, 1172, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 275, 276, 87, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 1063, 99, 238, 0, 0, 1058, 100,
	101, 102, 0, 103, 1061, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	280, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 243, 244, 0, 0, 0, 120, 121,
	245, 0, 122, 0, 123, 1066, 0, 0, 0, 124,
	246, 0, 247, 0, 125, 126, 127, 128, 1057, 249,
	0, 0, 132, 0, 129, 0, 0, 130, 250, 131,
	251, 252, 253, 0, 254, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 255, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 257,
	150, 258, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 0, 156, 0, 260, 157, 158, 159,
	160, 0, 261, 161, 262, 162, 1065, 163, 164, 165,
	263, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	264, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 266, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 268, 199,
	269, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 271, 272, 0, 0, 208, 273, 274, 0, 209,
	210, 211, 212, 0, 1064, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 275, 276, 87, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 1678, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 243, 244, 0, 0, 0,
	120, 121, 245, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 246, 0, 247, 0, 125, 126, 127, 128,
	248, 249, 0, 0, 132, 0, 129, 0, 0, 130,
	250, 131, 251, 252, 253, 0, 254, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 255, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 257, 150, 258, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 0, 156, 0, 260, 157,
	158, 159, 160, 0, 261, 161, 262, 162, 0, 163,
	164, 165, 263, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 264, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	266, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	268, 199, 269, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 271, 272, 0, 0, 208, 273, 274,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 275, 276, 87, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 280, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 243, 244, 0,
	0, 0, 120, 121, 245, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 246, 0, 247, 0, 125, 126,
	127, 128, 248, 249, 0, 0, 132, 0, 129, 0,
	0, 130, 250, 131, 251, 252, 253, 0, 254, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 255,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 256, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 257, 150, 258, 151, 152, 0, 153,
	0, 500, 154, 0, 0, 155, 259, 0, 156, 0,
	260, 157, 158, 159, 160, 0, 261, 161, 262, 162,
	0, 163, 164, 165, 263, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 264, 182, 0, 186, 187, 188,
	189, 0, 265, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 266, 267, 195, 0, 201, 196, 197, 185,
	198, 200, 268, 199, 269, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 270, 271, 272, 0, 0, 208,
	273, 274, 0, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 275, 276,
	87, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 90, 91, 892, 92,
	0, 0, 0, 0, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 280, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 243,
	244, 0, 0, 0, 120, 121, 245, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 246, 0, 247, 0,
	125, 126, 127, 128, 248, 249, 0, 0, 132, 0,
	129, 0, 0, 130, 250, 131, 251, 252, 253, 0,
	254, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 255, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 256, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 257, 150, 258, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 259, 0,
	156, 0, 260, 157, 158, 159, 160, 0, 261, 161,
	262, 162, 0, 163, 164, 165, 263, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 264, 182, 0, 186,
	187, 188, 189, 0, 265, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 266, 267, 195, 0, 201, 196,
	197, 185, 198, 200, 268, 199, 269, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 270, 271, 272, 0,
	0, 208, 273, 274, 0, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	275, 276, 87, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 243, 244, 0, 0, 0, 120, 121, 245, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 246, 0,
	247, 0, 125, 126, 127, 128, 798, 249, 0, 0,
	132, 0, 129, 0, 0, 130, 250, 131, 251, 252,
	253, 0, 254, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 255, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 257, 150, 258,
	151, 152, 0, 153, 0, 500, 154, 0, 0, 155,
	259, 0, 156, 0, 260, 157, 158, 159, 160, 0,
	261, 161, 262, 162, 0, 163, 164, 165, 263, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 264, 182,
	0, 186, 187, 188, 189, 0, 265, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 266, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 268, 199, 269, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 270, 271,
	272, 0, 0, 208, 273, 274, 0, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 275, 276, 87, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	90, 91, 558, 92, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	280, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 243, 244, 0, 0, 0, 120, 121,
	245, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	246, 0, 247, 0, 125, 126, 127, 128, 248, 249,
	0, 0, 132, 0, 129, 0, 0, 130, 250, 131,
	251, 252, 253, 0, 254, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 255, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 257,
	150, 258, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 0, 156, 0, 260, 157, 158, 159,
	160, 0, 261, 161, 262, 162, 0, 163, 164, 165,
	263, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	264, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 266, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 268, 199,
	269, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 271, 272, 0, 0, 208, 273, 274, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 275, 276, 87, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 243, 244, 0, 0, 0,
	120, 121, 245, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 246, 0, 247, 0, 125, 126, 127, 128,
	512, 249, 0, 0, 132, 0, 129, 0, 0, 130,
	250, 131, 251, 252, 253, 0, 254, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 255, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 257, 150, 258, 151, 152, 0, 153, 0, 500,
	154, 0, 0, 155, 259, 0, 156, 0, 260, 157,
	158, 159, 160, 0, 261, 161, 262, 162, 0, 163,
	164, 165, 263, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 264, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	266, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	268, 199, 269, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 271, 272, 0, 0, 208, 273, 274,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 275, 276, 87, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 280, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 243, 244, 0,
	0, 0, 120, 121, 245, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 246, 0, 247, 0, 125, 126,
	127, 128, 505, 249, 0, 0, 132, 0, 129, 0,
	0, 130, 250, 131, 251, 252, 253, 0, 254, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 255,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 256, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 257, 150, 258, 151, 152, 0, 153,
	0, 500, 154, 0, 0, 155, 259, 0, 156, 0,
	260, 157, 158, 159, 160, 0, 261, 161, 262, 162,
	0, 163, 164, 165, 263, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 264, 182, 0, 186, 187, 188,
	189, 0, 265, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 266, 267, 195, 0, 201, 196, 197, 185,
	198, 200, 268, 199, 269, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 270, 271, 272, 0, 0, 208,
	273, 274, 0, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 275, 276,
	87, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 90, 91, 410, 92,
	0, 0, 0, 0, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 280, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 243,
	244, 0, 0, 0, 120, 121, 245, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 246, 0, 247, 0,
	125, 126, 127, 128, 248, 249, 0, 0, 132, 0,
	129, 0, 0, 130, 250, 131, 251, 252, 253, 0,
	254, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 255, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 256, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 257, 150, 258, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 259, 0,
	156, 0, 260, 157, 158, 159, 160, 0, 261, 161,
	262, 409, 0, 163, 164, 165, 263, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 264, 182, 0, 186,
	187, 188, 189, 0, 265, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 266, 267, 195, 0, 201, 196,
	197, 185, 198, 200, 268, 199, 269, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 270, 271, 272, 0,
	0, 208, 273, 274, 0, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	275, 276, 87, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 243, 244, 0, 0, 0, 120, 121, 245, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 246, 0,
	247, 0, 125, 126, 127, 128, 248, 249, 0, 0,
	132, 0, 129, 0, 0, 130, 250, 131, 251, 252,
	253, 0, 254, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 255, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 257, 150, 258,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 0, 156, 0, 260, 157, 158, 159, 160, 0,
	261, 161, 262, 162, 0, 163, 164, 165, 263, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 264, 182,
	0, 186, 187, 188, 189, 0, 265, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 266, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 268, 199, 269, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 270, 271,
	272, 0, 0, 208, 273, 274, 0, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 275, 276, 87, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	280, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 243, 244, 0, 0, 0, 120, 121,
	245, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	246, 0, 247, 0, 125, 126, 127, 128, 1366, 249,
	0, 0, 132, 0, 129, 0, 0, 130, 250, 131,
	251, 252, 253, 0, 254, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 255, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 257,
	150, 258, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 0, 156, 0, 260, 157, 158, 159,
	160, 0, 261, 161, 262, 162, 0, 163, 164, 165,
	263, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	264, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 266, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 268, 199,
	269, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 271, 272, 0, 0, 208, 273, 274, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 275, 276, 87, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 243, 244, 0, 0, 0,
	120, 121, 245, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 246, 0, 247, 0, 125, 126, 127, 128,
	1364, 249, 0, 0, 132, 0, 129, 0, 0, 130,
	250, 131, 251, 252, 253, 0, 254, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 255, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 257, 150, 258, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 0, 156, 0, 260, 157,
	158, 159, 160, 0, 261, 161, 262, 162, 0, 163,
	164, 165, 263, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 264, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	266, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	268, 199, 269, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 271, 272, 0, 0, 208, 273, 274,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 275, 276, 87, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 280, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 243, 244, 0,
	0, 0, 120, 121, 245, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 246, 0, 247, 0, 125, 126,
	127, 128, 1353, 249, 0, 0, 132, 0, 129, 0,
	0, 130, 250, 131, 251, 252, 253, 0, 254, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 255,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 256, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 257, 150, 258, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 259, 0, 156, 0,
	260, 157, 158, 159, 160, 0, 261, 161, 262, 162,
	0, 163, 164, 165, 263, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 264, 182, 0, 186, 187, 188,
	189, 0, 265, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 266, 267, 195, 0, 201, 196, 197, 185,
	198, 200, 268, 199, 269, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 270, 271, 272, 0, 0, 208,
	273, 274, 0, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 275, 276,
	87, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 280, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 243,
	244, 0, 0, 0, 120, 121, 245, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 246, 0, 247, 0,
	125, 126, 127, 128, 924, 249, 0, 0, 132, 0,
	129, 0, 0, 130, 250, 131, 251, 252, 253, 0,
	254, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 255, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 256, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 257, 150, 258, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 259, 0,
	156, 0, 260, 157, 158, 159, 160, 0, 261, 161,
	262, 162, 0, 163, 164, 165, 263, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 264, 182, 0, 186,
	187, 188, 189, 0, 265, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 266, 267, 195, 0, 201, 196,
	197, 185, 198, 200, 268, 199, 269, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 270, 271, 272, 0,
	0, 208, 273, 274, 0, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	275, 276, 87, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 243, 244, 0, 0, 0, 120, 121, 245, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 246, 0,
	247, 0, 125, 126, 127, 128, 248, 249, 0, 0,
	132, 0, 129, 0, 0, 130, 250, 131, 251, 252,
	253, 0, 254, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 255, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 257, 150, 258,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 0, 156, 0, 260, 157, 158, 159, 160, 0,
	261, 161, 262, 162, 0, 163, 164, 165, 263, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 264, 182,
	0, 424, 187, 188, 189, 0, 265, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 266, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 268, 199, 269, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 270, 271,
	272, 0, 0, 208, 273, 274, 0, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 275, 276, 87, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 226, 0,
	783, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	280, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 243, 244, 0, 0, 0, 120, 121,
	245, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	246, 0, 247, 0, 125, 126, 127, 128, 248, 249,
	0, 0, 132, 0, 129, 0, 0, 130, 250, 131,
	251, 252, 253, 0, 254, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 255, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 257,
	150, 258, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 0, 156, 0, 260, 157, 158, 159,
	160, 0, 261, 161, 262, 162, 0, 163, 164, 165,
	263, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	264, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 0, 0, 183, 184, 193, 0, 194, 266, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 268, 199,
	269, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 271, 272, 0, 0, 208, 273, 274, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 275, 276, 87, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 243, 244, 0, 0, 0,
	120, 121, 245, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 246, 0, 247, 0, 125, 126, 127, 128,
	614, 249, 0, 0, 132, 0, 129, 0, 0, 130,
	250, 131, 251, 252, 253, 0, 254, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 255, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 257, 150, 258, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 0, 156, 0, 260, 157,
	158, 159, 160, 0, 261, 161, 262, 162, 0, 163,
	164, 165, 263, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 264, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	266, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	268, 199, 269, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 271, 272, 0, 0, 208, 273, 274,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 275, 276, 87, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 280, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 243, 244, 0,
	0, 0, 120, 121, 245, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 246, 0, 247, 0, 125, 126,
	127, 128, 609, 249, 0, 0, 132, 0, 129, 0,
	0, 130, 250, 131, 251, 252, 253, 0, 254, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 255,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 256, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 257, 150, 258, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 259, 0, 156, 0,
	260, 157, 158, 159, 160, 0, 261, 161, 262, 162,
	0, 163, 164, 165, 263, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 264, 182, 0, 186, 187, 188,
	189, 0, 265, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 266, 267, 195, 0, 201, 196, 197, 185,
	198, 200, 268, 199, 269, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 270, 271, 272, 0, 0, 208,
	273, 274, 0, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 275, 276,
	87, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 564, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 280, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 243,
	244, 0, 0, 0, 120, 121, 245, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 246, 0, 247, 0,
	125, 126, 127, 128, 248, 249, 0, 0, 132, 0,
	129, 0, 0, 130, 250, 131, 251, 252, 253, 0,
	254, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 255, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 256, 436, 0, 146, 147,
	149, 148, 0, 0, 0, 257, 150, 258, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 259, 0,
	156, 0, 260, 157, 158, 159, 160, 0, 261, 161,
	262, 162, 0, 163, 164, 165, 263, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 264, 182, 0, 186,
	187, 188, 189, 0, 265, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 266, 267, 195, 0, 201, 196,
	197, 185, 198, 200, 268, 199, 269, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 435, 271, 272, 0,
	0, 431, 273, 274, 0, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	275, 276, 87, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 243, 244, 0, 0, 0, 120, 121, 245, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 246, 0,
	247, 0, 125, 126, 127, 128, 248, 249, 0, 0,
	132, 0, 129, 0, 0, 130, 250, 131, 251, 252,
	253, 0, 254, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 255, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 436, 0,
	146, 147, 149, 148, 0, 0, 0, 257, 150, 258,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 0, 156, 0, 260, 157, 158, 159, 160, 0,
	261, 161, 262, 162, 0, 163, 164, 165, 263, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 264, 182,
	0, 186, 187, 188, 189, 0, 265, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 266, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 268, 199, 269, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 435, 271,
	272, 0, 0, 431, 273, 274, 0, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 275, 276, 87, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	280, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 243, 244, 0, 0, 0, 120, 121,
	245, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	246, 0, 247, 0, 125, 126, 127, 128, 542, 249,
	0, 0, 132, 0, 129, 0, 0, 130, 250, 131,
	251, 252, 253, 0, 254, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 255, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 257,
	150, 258, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 0, 156, 0, 260, 157, 158, 159,
	160, 0, 261, 161, 262, 162, 0, 163, 164, 165,
	263, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	264, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 266, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 268, 199,
	269, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 271, 272, 0, 0, 208, 273, 274, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 275, 276, 87, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 243, 244, 0, 0, 0,
	120, 121, 245, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 246, 0, 247, 0, 125, 126, 127, 128,
	539, 249, 0, 0, 132, 0, 129, 0, 0, 130,
	250, 131, 251, 252, 253, 0, 254, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 255, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 257, 150, 258, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 0, 156, 0, 260, 157,
	158, 159, 160, 0, 261, 161, 262, 162, 0, 163,
	164, 165, 263, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 264, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	266, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	268, 199, 269, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 270, 271, 272, 0, 0, 208, 273, 274,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 275, 276, 87, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 280, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 243, 244, 0,
	0, 0, 120, 121, 245, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 246, 0, 247, 0, 125, 126,
	127, 128, 536, 249, 0, 0, 132, 0, 129, 0,
	0, 130, 250, 131, 251, 252, 253, 0, 254, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 255,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 256, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 257, 150, 258, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 259, 0, 156, 0,
	260, 157, 158, 159, 160, 0, 261, 161, 262, 162,
	0, 163, 164, 165, 263, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 264, 182, 0, 186, 187, 188,
	189, 0, 265, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 266, 267, 195, 0, 201, 196, 197, 185,
	198, 200, 268, 199, 269, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 270, 271, 272, 0, 0, 208,
	273, 274, 0, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 275, 276,
	87, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 280, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 243,
	244, 0, 0, 0, 120, 121, 245, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 246, 0, 247, 0,
	125, 126, 127, 128, 534, 249, 0, 0, 132, 0,
	129, 0, 0, 130, 250, 131, 251, 252, 253, 0,
	254, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 255, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 256, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 257, 150, 258, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 259, 0,
	156, 0, 260, 157, 158, 159, 160, 0, 261, 161,
	262, 162, 0, 163, 164, 165, 263, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 264, 182, 0, 186,
	187, 188, 189, 0, 265, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 266, 267, 195, 0, 201, 196,
	197, 185, 198, 200, 268, 199, 269, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 270, 271, 272, 0,
	0, 208, 273, 274, 0, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	275, 276, 87, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 280, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 243, 244, 0, 0, 0, 120, 121, 245, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 246, 0,
	247, 0, 125, 126, 127, 128, 508, 249, 0, 0,
	132, 0, 129, 0, 0, 130, 250, 131, 251, 252,
	253, 0, 254, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 255, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 256, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 257, 150, 258,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	259, 0, 156, 0, 260, 157, 158, 159, 160, 0,
	261, 161, 262, 162, 0, 163, 164, 165, 263, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 264, 182,
	0, 186, 187, 188, 189, 0, 265, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 266, 267, 195, 0,
	201, 196, 197, 185, 198, 200, 268, 199, 269, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 270, 271,
	272, 0, 0, 208, 273, 274, 0, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 275, 276, 87, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	280, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 243, 244, 0, 0, 0, 120, 121,
	245, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	246, 0, 247, 0, 125, 126, 127, 128, 248, 249,
	0, 0, 132, 0, 129, 0, 0, 130, 250, 131,
	251, 252, 253, 0, 254, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 255, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 256,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 257,
	150, 258, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 259, 0, 156, 0, 260, 157, 158, 159,
	160, 0, 261, 161, 262, 162, 0, 163, 164, 165,
	263, 489, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	264, 182, 0, 186, 187, 188, 189, 0, 265, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 266, 267,
	195, 0, 201, 196, 197, 185, 198, 200, 268, 199,
	269, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	270, 271, 272, 0, 0, 208, 273, 274, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 275, 276, 87, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 429, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 280, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 243, 244, 0, 0, 0,
	120, 121, 245, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 246, 0, 247, 0, 125, 126, 127, 128,
	248, 249, 0, 0, 132, 0, 129, 0, 0, 130,
	250, 131, 251, 252, 253, 0, 254, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 255, 0, 138,
	0, 0, 427, 0, 0, 140, 0, 141, 142, 143,
	145, 256, 436, 0, 146, 147, 149, 148, 0, 0,
	0, 257, 150, 258, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 259, 0, 156, 0, 260, 157,
	158, 159, 160, 0, 261, 161, 262, 162, 0, 163,
	164, 165, 263, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 430, 182, 0, 186, 187, 188, 189, 0,
	265, 190, 428, 0, 192, 183, 184, 193, 0, 194,
	266, 267, 195, 0, 201, 196, 197, 185, 198, 200,
	268, 199, 269, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 435, 271, 272, 0, 0, 431, 273, 274,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 275, 276, 87, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 280, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 243, 244, 0,
	0, 0, 120, 121, 245, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 246, 0, 247, 0, 125, 126,
	127, 128, 248, 249, 0, 0, 132, 0, 129, 0,
	0, 130, 250, 131, 251, 252, 253, 0, 254, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 255,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 256, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 257, 150, 258, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 259, 0, 156, 0,
	260, 157, 158, 0, 160, 0, 261, 161, 262, 162,
	0, 163, 0, 165, 263, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 264, 0, 0, 186, 187, 188,
	189, 0, 265, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 266, 267, 195, 0, 201, 196, 197, 185,
	198, 200, 268, 199, 269, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 270, 271, 272, 0, 0, 208,
	273, 274, 0, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 275, 276,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 948, 949, 0, 968, 969, 970, 978, 979,
	980, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 951, 948, 949, 982, 968,
	969, 970, 978, 979, 980, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 950, 951,
	0, 0, 982, 0, 965, 0, 0, 0, 948, 949,
	0, 968, 969, 970, 978, 979, 980, 0, 0, 0,
	0, 0, 950, 0, 971, 0, 0, 0, 965, 0,
	0, 951, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 950, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 983, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 0, 975, 983, 0, 0,
	973, 0, 0, 0, 0, 0, 966, 0, 0, 956,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 975, 983,
	966, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 973, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1523, 1524, 976, 1541, 1542, 1543, 0, 0,
	974, 0, 0, 962, 963, 964, 977, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 0, 0,
	0, 1981, 0, 0, 974, 0, 0, 962, 963, 964,
	977, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 0, 1538, 1976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 962,
	963, 964, 977, 0, 961, 959, 960, 952, 953, 954,
	955, 957, 958, 0, 0, 948, 949, 1972, 968, 969,
	970, 978, 979, 980, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 1529, 0, 0, 0, 0, 951, 948,
	949, 982, 968, 969, 970, 978, 979, 980, 0, 0,
	0, 0, 0, 1545, 0, 971, 0, 0, 0, 0,
	0, 950, 951, 0, 0, 982, 0, 965, 1544, 0,
	0, 948, 949, 0, 968, 969, 970, 978, 979, 980,
	0, 0, 0, 0, 0, 950, 1539, 971, 0, 0,
	0, 965, 0, 0, 951, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 950, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 983, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 0, 0, 1540, 0, 0, 0, 0, 975,
	983, 0, 0, 973, 0, 0, 0, 0, 0, 966,
	0, 0, 956, 0, 0, 981, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 975, 983, 966, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 973,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 1535, 1536, 1537, 0, 967, 1534, 1532,
	1533, 1525, 1526, 1527, 1528, 1530, 1531, 0, 0, 0,
	972, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 0, 974, 0, 0, 962, 963, 964, 977,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 0, 0, 0, 1912, 0, 0, 974, 0, 0,
	962, 963, 964, 977, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 0, 0, 0, 1890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 962, 963, 964, 977, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 948, 949,
	1889, 968, 969, 970, 978, 979, 980, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 951, 948, 949, 982, 968, 969, 970, 978, 979,
	980, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 950, 951, 0, 0, 982, 0,
	965, 0, 0, 0, 948, 949, 0, 968, 969, 970,
	978, 979, 980, 0, 0, 0, 0, 0, 950, 0,
	971, 0, 0, 0, 965, 0, 0, 951, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	950, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 983,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 0, 0, 0, 0,
	0, 0, 975, 983, 0, 0, 973, 0, 0, 0,
	0, 0, 966, 0, 0, 956, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 975, 983, 966, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 973, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 974, 0, 0, 962,
	963, 964, 977, 0, 961, 959, 960, 952, 953, 954,
	955, 957, 958, 0, 0, 0, 0, 1780, 0, 0,
	974, 0, 0, 962, 963, 964, 977, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 0, 0,
	0, 1714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 962, 963, 964, 977, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	0, 948, 949, 1698, 968, 969, 970, 978, 979, 980,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 951, 948, 949, 982, 968, 969,
	970, 978, 979, 980, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 950, 951, 0,
	0, 982, 0, 965, 0, 0, 0, 948, 949, 0,
	968, 969, 970, 978, 979, 980, 0, 0, 0, 0,
	0, 950, 0, 971, 0, 0, 0, 965, 0, 0,
	951, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 950, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 983, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 0, 0, 975, 983, 0, 0, 973,
	0, 0, 0, 0, 0, 966, 0, 0, 956, 2121,
	0, 981, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 975, 983, 966,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 981, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 973, 0, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	2120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 0, 0, 0, 974,
	0, 0, 962, 963, 964, 977, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 0, 0,
	1274, 0, 0, 974, 0, 0, 962, 963, 964, 977,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 962, 963,
	964, 977, 0, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 948, 949, 0, 968, 969, 970, 978, 979,
	980, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 951, 948, 949, 982, 968,
	969, 970, 978, 979, 980, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 1189, 950, 951,
	0, 0, 982, 0, 965, 0, 0, 986, 0, 0,
	0, 0, 0, 948, 949, 0, 968, 969, 970, 978,
	979, 980, 950, 0, 0, 0, 0, 0, 965, 971,
	0, 0, 0, 985, 0, 0, 951, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 1555, 1190, 0, 1554, 950,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 975, 983, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 0, 975, 983, 0, 0,
	973, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 981, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	966, 972, 0, 975, 983, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	974, 0, 0, 962, 963, 964, 977, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 962, 963, 964,
	977, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 962, 963, 964, 977, 0, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 948, 949,
	0, 968, 969, 970, 978, 979, 980, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 951, 948, 949, 982, 968, 969, 970, 978, 979,
	980, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 950, 951, 0, 0, 982, 0,
	965, 0, 0, 0, 948, 949, 0, 968, 969, 970,
	978, 979, 980, 0, 0, 0, 0, 0, 950, 0,
	971, 0, 0, 0, 965, 0, 0, 951, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	950, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 983,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 0, 0, 0, 0,
	0, 0, 975, 983, 0, 0, 973, 0, 0, 0,
	0, 0, 966, 0, 0, 956, 0, 0, 981, 0,
	1561, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 975, 983, 966, 972, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 973, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 1702, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 974, 0, 0, 962,
	963, 964, 977, 0, 961, 959, 960, 952, 953, 954,
	955, 957, 958, 0, 0, 0, 0, 0, 0, 0,
	974, 0, 0, 962, 963, 964, 977, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 962, 963, 964, 977, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 948,
	949, 0, 968, 969, 970, 978, 979, 980, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 1556,
	0, 0, 951, 948, 949, 982, 968, 969, 970, 978,
	979, 980, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 950, 951, 0, 0, 982,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 948, 949, 0, 968,
	969, 970, 978, 979, 980, 0, 0, 0, 0, 975,
	983, 0, 971, 0, 956, 0, 1514, 0, 0, 951,
	0, 0, 982, 0, 0, 981, 0, 0, 0, 0,
	0, 0, 0, 975, 983, 0, 0, 973, 0, 0,
	0, 0, 950, 966, 0, 0, 0, 0, 965, 981,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 966, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 975, 983, 0, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 981, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 976,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 974, 0, 0,
	962, 963, 964, 977, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 962, 963, 964, 977, 967, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 0,
	948, 949, 976, 968, 969, 970, 978, 979, 980, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 951, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 948, 949, 0,
	968, 969, 970, 978, 979, 980, 950, 0, 0, 0,
	0, 0, 965, 971, 0, 0, 0, 0, 0, 0,
	951, 0, 0, 982, 974, 0, 0, 962, 963, 964,
	977, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 950, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 983, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 956, 0,
	0, 0, 0, 948, 949, 0, 0, 0, 973, 978,
	979, 980, 0, 0, 966, 0, 0, 975, 983, 0,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 982,
	0, 0, 0, 981, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 950,
	0, 966, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 948, 949, 0, 968, 969, 970,
	978, 979, 980, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 951, 0, 0,
	982, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 965, 0, 0, 967,
	0, 0, 0, 975, 983, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 966, 974, 0,
	0, 962, 963, 964, 977, 956, 961, 959, 960, 952,
	953, 954, 955, 957, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 983, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 962, 963,
	964, 977, 0, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 973, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 0, 0, 0, 0, 0, 824, 816, 841,
	809, 832, 831, 0, 0, 811, 810, 0, 0, 0,
	843, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 837, 0, 829, 828, 0, 0, 0, 0,
	976, 974, 0, 827, 0, 0, 0, 977, 0, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 0,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 819, 818,
	820, 821, 822, 0, 840, 0, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 962, 963, 964, 977, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 813,
	0, 0, 0, 0, 824, 816, 841, 809, 832, 831,
	0, 830, 811, 810, 0, 817, 0, 843, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 1208, 1206, 1207, 1210, 1209, 837,
	0, 829, 828, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 814, 0,
	0, 0, 0, 0, 0, 0, 0, 826, 823, 815,
	0, 0, 0, 0, 0, 0, 0, 0, 845, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 0,
	0, 838, 839, 0, 0, 819, 818, 820, 821, 822,
	0, 840, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 813, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 823, 815, 0, 0, 0,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 812, 0, 0, 838, 839,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 844,
}
var sqlPact = [...]int{

	4349, -1000, 55, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 728, 16750, 16750, 20838, -1000, -1000, -1000, -1000, -1000,
	-1000, 747, 720, 2883, 5629, 20838, 20838, 20546, 851, 851,
	22298, -1000, -1000, 25802, -1000, 4062, 584, 587, 584, 584,
	599, 22298, 20838, 709, 726, 148, -1000, 811, 2, 25510,
	20838, 1447, 52, 18794, 383, 4349, 20254, 25218, 20838, 19962,
	662, 50, 17334, 20838, -1000, 59, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1288, 416, 59,
	-1000, 1287, 1185, 1149, 18794, 24926, 24634, 24342, 24050, -1000,
	12878, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 841, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 389, 388, -1000, 19670,
	-1000, 1044, -1000, 51, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1033, -1000, 20838, -1000, -1000, 23758, 23466, 770,
	387, 989, -1000, -1000, 630, 471, 1465, -1000, 61, -1000,
	1467, 766, -1000, -1000, 1284, -1000, 1022, 1283, 1282, 1281,
	1279, 1278, 1277, 465, 874, 544, -1000, 1276, 989, -1000,
	989, -1000, -1000, -1000, 660, 22298, -1000, -1000, 18794, -1000,
	23174, 20838, 20838, 1213, 22882, -1000, 811, -1000, -1000, -1000,
	1079, 1443, 1443, 1443, 1495, 198, 189, 148, 38, 20838,
	-1000, 385, 38, 9752, 9752, -1000, -1000, 383, -1000, 420,
	15862, -1000, 8801, -1000, 935, 1346, 603, 830, 1339, -88,
	867, 866, 1337, 16458, 17334, 50, 49, -1000, -1000, -1000,
	5325, 16458, 742, 14973, 59, -1000, -1000, -1000, 18794, 20838,
	20838, 777, 22590, -1000, 1335, 130, 1334, -1000, 128, 1333,
	-1000, 128, 1332, 47, -1000, -1000, -1000, -1000, -1000, -1000,
	383, 19378, 20838, 1566, 29467, -1000, 11021, -1000, -1000, 16750,
	969, 16750, -1000, -1000, 1557, -1000, 20838, 11021, -1000, 48,
	46, 1131, 1117, 13488, 13184, 1410, 808, -1000, -1000, -1000,
	60, 5629, 763, 19086, 20838, 1299, 16750, 20838, 20838, 20838,
	20838, 20838, 20838, -1000, 1130, -1000, -1000, 20838, 20838, 838,
	900, 45, 40, 900, 22298, -1000, 131, -1000, 382, 1097,
	487, 206, 22006, 487, 1096, -1000, 1079, -1000, 991, 1126,
	10070, 11021, 148, -1000, -1000, 148, 148, 11021, -1000, -1000,
	20838, 38, 1553, 20838, 160, -1000, 27943, -1000, -1000, 11021,
	11021, 11021, 11021, 11021, 939, 414, -1000, 366, 363, 6568,
	-1000, -1000, 1684, -1000, -1000, -1000, 200, -1000, -1000, 11021,
	59, -1000, -1000, -1000, -1000, 361, 1703, -1000, 436, -1000,
	-1000, -1000, 483, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1298, 357, 355, -1000, -1000, -1000, -1000, 354,
	353, 352, 351, 349, 348, 346, 345, 344, 327, 325,
	319, 318, 317, 316, 914, -1000, 511, -1000, -1000, 511,
	511, -1000, 312, 312, 313, -1000, -1000, -1000, -1000, 312,
	-1000, -1000, -1000, 450, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 315, 160, -1000, -1000, -1000, 20838, 42, -1000, 28970,
	-1000, -5, 889, -1000, 18210, 1427, 1424, 1437, 18794, 1512,
	2, 1275, 1508, 2, 1274, 658, 20838, 20838, 653, 648,
	18794, 443, -1000, -1000, -1000, -1000, -1000, 20838, -1000, -1000,
	3, -1000, -1000, 1273, 36, -1000, -1000, 496, 112, 1540,
	112, 15270, -1000, 20838, 20838, -1000, 20838, -1000, -1000, 20838,
	-1000, 20838, 20838, -1000, 20838, 159, 17626, 843, 1330, 768,
	2, 35, -1000, 1574, -1000, -1000, -1000, -1000, 102, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 313, 914, 312, 312,
	312, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 450, -1000,
	-1000, 511, 511, 511, -1000, -1000, 34, 28970, 645, -1000,
	1267, 583, -1000, 475, 24, 903, 1161, 1032, -1000, -1000,
	-1000, -1000, 27, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1646, -1000, -1000, 1677, 27, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1699, 5629, -1000,
	-1000, -1000, -1000, -1000, -1000, 20838, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20838, 20838, -1000, 596,
	903, 1161, -1000, -1000, -1000, 18794, 17918, 1539, 1327, 920,
	-1000, 1536, 20838, 1021, 1094, -1000, 681, 1324, -1000, -1000,
	-1000, -1000, 28970, -1000, 28970, 816, 1192, -1000, 1192, 19,
	-1000, 27906, -1000, 310, 14, 496, 9752, 14677, 29330, 29467,
	5629, 696, 11021, 11021, 11021, 11021, 11021, 11021, 11021, 11021,
	11021, 11021, 11021, 11021, 11021, 11021, 11021, 11021, 11021, 11021,
	11021, 11021, 11021, 11021, 1257, 11021, 632, 11021, 11021, 11021,
	11021, 1764, 960, 282, 981, 5629, -1000, -1000, 1639, 1639,
	1639, 186, 186, 295, 414, -1000, 11021, -1000, 9435, 189,
	27511, 15, -1000, -1000, -1000, 7520, 506, 28970, 59, 6250,
	-1000, 1675, 673, 1305, 1238, 309, 188, 184, 11021, 11021,
	11338, 11338, 11021, 11655, 11021, 11021, 6885, 11021, 11021, 11021,
	11021, 11021, 11021, -1000, 307, -1000, -1000, -1000, -1000, 1674,
	-1000, -1000, 1668, -1000, 679, 674, 1655, 496, 183, 8801,
	-1000, 843, 20838, 20838, 20838, -1000, -1000, 1093, 21714, 1091,
	29467, 20838, -1000, 304, 296, 1147, 1146, 20838, 20838, 21422,
	21130, 20838, 856, 2, -1000, 294, 2, -1000, 286, 20838,
	833, -1000, 20838, 20838, 817, 1227, 1036, -1000, 489, 16458,
	741, 1264, 20838, 819, 11021, 928, -1000, 14381, 516, 20838,
	819, 115, -1000, -1000, -1000, 439, 20838, -1000, -1000, -1000,
	130, -1000, 128, 128, -1000, -1000, 18794, -1000, -1000, -1000,
	-1000, -1000, -1000, 29467, 412, 405, -1000, 1651, 627, -1000,
	624, 622, 618, -1000, 284, -1000, 11021, 20838, 20838, 1161,
	-1000, -1000, -1000, -1000, 796, -1000, 899, -1000, 13792, -1000,
	-1000, -1000, -1000, -11, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 167, 13, 9, 29467, -1000, -1000, -1000, -1000,
	-1000, 20838, 324, 20838, 2, 20838, -1000, 1695, 2, 20838,
	1323, 1355, 434, 20838, -1000, -1000, -1000, 11021, -1000, -1000,
	-1000, 2, -1000, 1237, -1000, -100, 1957, 1418, -146, 195,
	453, -1000, 14085, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 463, 901, 901, 676, 676, 676, 676,
	1637, 994, 1005, 223, 29113, 29113, 29113, 2970, 2269, 2269,
	29113, 29113, 29113, 186, 29007, 2180, 11021, 11021, 617, 950,
	282, 2180, 11021, 2180, 2180, 2180, 2180, -1000, 1280, -1000,
	-1000, -1000, -1000, 1262, 281, 11655, 11655, -1000, -1000, -1000,
	6568, 11972, -1000, -1000, -1000, -1000, -1000, 279, 11021, -1000,
	27535, -163, 8, -1000, -1000, 11021, -102, -116, -1000, -1000,
	707, -1000, 11021, -1000, -10, 11021, 11021, 11021, 162, 157,
	-1000, 956, 278, 276, 11021, -1000, -1000, 28736, 3993, 145,
	1261, -139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 141,
	138, 28653, -139, 136, 26682, -1000, 11655, 11655, 11655, 6568,
	272, 135, 27882, -139, 28629, 9118, 9118, 9118, 127, 28314,
	11021, -139, 3722, 3668, 3304, 7, -1, -3, 1650, -9,
	125, 458, 456, 123, 1237, -1000, -1000, -1000, -1000, 615,
	614, 1321, -1000, 1078, -1000, 520, -1000, 767, 11021, 12582,
	269, 268, 882, -1000, 1320, 1029, 1319, 1029, -1000, -5,
	878, -1000, 11021, -1000, 11021, -1000, 613, -1000, -1000, 612,
	489, 1260, 708, -1000, 973, -1000, -1000, 737, -1000, -1000,
	7202, 28970, -1000, 819, 1436, -14, -1000, -1000, -1000, 496,
	15270, 14677, 8801, -22, -1000, -1000, -1000, 843, -1000, 452,
	1648, 122, 1109, 947, 875, 792, 1635, 28970, -11, -11,
	-1000, -1000, -1000, -1000, -1000, 20838, 1219, -1000, 17918, 267,
	20838, 253, -1000, 252, -1000, -1000, 250, 20838, 1136, 434,
	17042, -1000, 487, -1000, 121, 1232, 1485, -1000, 14677, 1153,
	1151, 14677, 943, 951, 951, 951, -1000, 249, 972, 453,
	4703, 11021, 18502, 968, 83, 120, 1957, 11021, 2180, 2180,
	11021, 11655, 11655, -1000, 2180, -1000, -1000, -1000, -1000, -1000,
	1258, 248, 11021, 29467, 3484, 3338, -23, -1000, 8484, -13,
	-1000, 11021, -1000, 27194, -1000, -1000, 403, 1353, -1000, 11021,
	28282, 119, 8167, -1000, 28258, -20, -20, -1000, 1690, -1000,
	15566, 498, 970, 27162, 29330, 29467, -1000, 11021, -1000, -1000,
	1256, 11021, -1000, 29330, 29467, 11655, 11655, 11655, 11655, 11655,
	11655, 11655, 11655, 11655, 11655, 11655, 11655, 11655, 11655, 11655,
	11655, 11655, 11655, 11655, 1168, 11655, 1620, 1620, 1620, -18,
	7850, -1000, 1293, 1256, 11021, 11021, 29467, 116, 114, 110,
	-1000, 11021, -139, 11021, 11021, 11021, -1000, -1000, -1000, 109,
	-1000, 1632, -1000, -1000, -1000, -1000, 1232, 20838, 20838, 20838,
	1317, -1000, 1354, -1000, 27138, -27, -1000, 332, 1470, 11021,
	-1000, -1000, 244, 12582, 20838, -1000, 1160, 1171, 568, 20838,
	-1000, 20838, -1000, 20838, 20838, 20838, -29, -31, 20838, 20838,
	-1000, 16458, 606, 243, -1000, -24, -1000, -1000, 245, 2,
	819, -1000, -38, -1000, 437, -1000, 400, 399, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 108, -1000, -1000, 1221,
	-1000, 12582, 242, 20838, 17918, 1524, 12582, 995, 1138, 434,
	17042, -1000, 681, -1000, 493, 11021, 11021, 1957, 14677, 14677,
	1336, 1150, 14677, -1000, -1000, -1000, -1000, 398, 393, 396,
	12878, 18502, -1000, 1628, 1164, -37, -1000, -1000, 20838, 241,
	-1000, 453, 1630, 2180, 2262, 347, 11021, 29467, 29174, -39,
	11021, 11021, -1000, -48, -1000, 11021, 392, 28970, -1000, -1000,
	-1000, 28970, 11021, 1641, 11021, 107, 104, 98, -1000, -1000,
	-1000, 26094, 11021, 95, -1000, 91, 90, 28970, 1293, 28970,
	-1000, -1000, 509, 509, 732, 732, 732, 732, 1620, 2304,
	2186, 2195, 161, 161, 161, 1898, 640, 640, 161, 161,
	161, 1252, 1157, 240, 4076, 11021, -52, -1000, -1000, -1000,
	28970, 28970, 87, -1000, -1000, -1000, -139, 2841, 26821, 26789,
	-1000, 86, 493, -1000, -1000, -1000, 20838, -1000, 20838, -1000,
	5629, 20838, 1247, 1062, -1000, -1000, 1142, 236, 11655, 20838,
	-1000, 932, 12582, 1435, 59, 5629, 1435, 26765, 6250, -54,
	-58, 1058, -1000, 1055, 11021, -1000, 29467, 1029, 1029, -1000,
	605, 595, 594, 590, -1000, -1000, -50, 16166, 1689, 1372,
	20838, 1425, -1000, -1000, 235, -1000, -1000, -1000, 933, -59,
	12582, -65, 84, 2, -66, 20838, -1000, 434, 17042, -1000,
	1355, -1000, 20838, 28970, -139, -1000, 1336, -1000, 233, 11021,
	14677, -1000, -146, -1000, -70, -1000, 453, -72, -1000, 391,
	-166, -1000, 362, -1000, 453, 231, 20838, 18502, 11021, 11021,
	29174, -74, -1000, 2180, 2180, -1000, 26448, -1000, 28970, -1000,
	28258, -1000, -1000, -1000, 927, -1000, 26416, -1000, -1000, -1000,
	-1000, 11655, 1245, 230, 29467, 26392, -1000, -1000, 11021, -1000,
	-1000, -1000, -1000, -1000, 818, -1000, -1000, 20838, 1075, -1000,
	-1000, 11021, 4076, 228, 1219, 227, -1000, -1000, -1000, -1000,
	-1000, -1000, 1470, -10, -1000, 890, -1000, -1000, 28970, 1468,
	-1000, -1000, 20838, 20838, 226, 221, -1000, 210, 59, -78,
	-1000, 175, 641, -80, 20838, -1000, -1000, 5933, 20838, 932,
	-85, -1000, 1219, -1000, 932, 209, 17042, -1000, 1136, -82,
	-1000, 1520, -1000, 20838, 28970, -1000, 453, -1000, 1621, 18502,
	159, -1000, 1164, -1000, 5018, 18502, 20838, -86, -1000, 2180,
	2180, -1000, -1000, 78, 970, 1483, -1000, 384, 11655, 29467,
	-91, -1000, 4216, -1000, -1000, 1316, 4047, 1119, 20838, -1000,
	20838, 1435, 76, 20838, 524, 5629, -1000, -1000, 11021, 11021,
	11021, 1689, -1000, -1000, 1687, 776, -1000, 496, -1000, 208,
	1219, 932, -1000, 1219, 12582, -1000, 1138, 20838, 207, -92,
	18502, -1000, -1000, 224, -1000, -1000, 1614, -1000, -103, -1000,
	-1000, 834, 11021, 384, -108, -1000, -1000, 1290, -1000, 977,
	1030, 74, -124, -1000, -1000, 206, -1000, 11021, -1000, -138,
	-140, -20, -1000, -1000, 15270, -1000, 20838, -1000, 1219, -1000,
	-148, -1000, -1000, -1000, -1000, -1000, 453, 117, -1000, 73,
	10704, 10704, -139, -1000, 20838, -1000, 985, 978, 740, -1000,
	-1000, -1000, -1000, -1000, 1119, 28970, -1000, -1000, 72, -117,
	-153, -1000, 932, 18502, -1000, -1000, -1000, -1000, 12278, 1007,
	802, 27567, -1000, -1000, -1000, 1379, -1000, 558, 992, 992,
	977, 1641, -1000, 1020, 1219, -1000, 1585, -1000, -1000, -1000,
	-1000, -1000, -1000, 1597, -1000, -1000, 1145, -1000, -1000, -1000,
	-1000, -1000, -1000, 10387, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1976, 1973, 1483, 1633, 1972, 1971, 1622, 1969, 1968,
	1963, 1962, 1961, 1959, 119, 1614, 1607, 27, 1598, 1958,
	110, 1957, 1955, 1952, 114, 1951, 1950, 1949, 1944, 68,
	1941, 1937, 1589, 1576, 1548, 1508, 1934, 1933, 112, 1931,
	25, 1930, 95, 1929, 42, 154, 2761, 148, 1928, 1925,
	1922, 58, 126, 106, 1921, 91, 1919, 1918, 44, 37,
	29, 21, 1915, 118, 134, 1286, 40, 1914, 1912, 155,
	1911, 19, 30, 2152, 163, 162, 135, 139, 1910, 1905,
	1904, 1901, 60, 1897, 2, 1896, 1895, 13, 88, 12,
	1893, 38, 23, 1866, 1865, 142, 1863, 92, 122, 1474,
	146, 137, 167, 1862, 99, 14, 94, 1860, 1854, 143,
	103, 1851, 41, 97, 149, 1850, 86, 165, 81, 50,
	82, 124, 1849, 1844, 1837, 117, 1836, 128, 90, 1835,
	1831, 96, 1830, 147, 150, 1821, 1820, 133, 1814, 1812,
	153, 174, 1808, 1806, 168, 1804, 151, 8, 56, 87,
	9, 1478, 1475, 127, 76, 43, 16, 1803, 1813, 1011,
	1131, 53, 105, 73, 72, 102, 66, 89, 159, 18,
	1800, 1799, 129, 1798, 1797, 1796, 1795, 1793, 100, 1792,
	1790, 93, 157, 24, 4, 17, 121, 49, 61, 104,
	132, 161, 130, 1788, 109, 131, 59, 207, 1784, 1783,
	1345, 136, 1782, 1781, 1779, 1239, 1195, 728, 31, 1778,
	1777, 218, 28, 1774, 1773, 67, 1770, 141, 1768, 1766,
	158, 236, 36, 1763, 57, 52, 116, 1762, 125, 75,
	0, 611, 324, 1756, 138, 98, 1754, 1751, 1749, 1748,
	32, 3, 10, 6, 7, 5, 26, 22, 1747, 1746,
	145, 64, 85, 1745, 164, 1744, 1741, 1740, 55, 1739,
	15, 1738, 20, 1737, 1736, 11, 1, 1735, 1727, 152,
	1726, 123, 1725, 1531, 1717, 160, 1710, 1637, 1533, 39,
	101,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 228, 228, 229, 229, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 196, 196, 195, 19,
	170, 170, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 269, 269, 269, 273, 273,
	274, 274, 275, 275, 275, 275, 275, 275, 275, 271,
	271, 27, 31, 31, 31, 31, 31, 31, 145, 141,
	141, 143, 143, 143, 143, 64, 140, 140, 140, 140,
	142, 142, 142, 142, 221, 220, 220, 226, 226, 226,
	79, 79, 79, 79, 79, 80, 80, 80, 219, 219,
	219, 219, 227, 227, 227, 227, 227, 227, 81, 81,
	81, 225, 225, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 18,
	270, 270, 272, 272, 33, 33, 34, 34, 35, 35,
	35, 35, 10, 10, 11, 11, 82, 82, 83, 83,
	149, 149, 149, 149, 84, 84, 56, 56, 56, 148,
	238, 238, 239, 239, 239, 239, 239, 239, 240, 240,
	240, 240, 240, 240, 240, 236, 236, 237, 234, 234,
	235, 235, 235, 235, 276, 276, 147, 147, 87, 87,
	243, 243, 243, 243, 241, 241, 241, 241, 241, 244,
	242, 245, 245, 245, 245, 245, 182, 182, 182, 37,
	12, 62, 62, 13, 9, 9, 130, 130, 91, 91,
	187, 187, 187, 72, 72, 51, 51, 51, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 131,
	131, 132, 132, 25, 30, 36, 36, 36, 36, 36,
	146, 146, 146, 278, 278, 68, 68, 68, 68, 69,
	69, 144, 144, 144, 144, 144, 63, 8, 8, 58,
	58, 59, 59, 60, 60, 61, 61, 279, 279, 24,
	24, 24, 75, 75, 137, 137, 137, 139, 139, 138,
	138, 138, 116, 116, 116, 38, 96, 96, 105, 105,
	106, 106, 193, 107, 107, 29, 29, 46, 46, 44,
	44, 44, 44, 44, 44, 45, 45, 47, 47, 47,
	47, 47, 47, 47, 251, 251, 251, 254, 254, 250,
	252, 252, 253, 253, 277, 277, 117, 117, 117, 86,
	85, 85, 89, 89, 88, 90, 90, 186, 114, 114,
	114, 114, 133, 134, 134, 135, 135, 136, 136, 113,
	113, 166, 166, 48, 48, 95, 95, 97, 97, 156,
	156, 156, 157, 157, 155, 155, 155, 155, 188, 188,
	188, 188, 188, 188, 188, 188, 267, 267, 267, 268,
	268, 185, 185, 189, 189, 189, 189, 189, 189, 183,
	183, 183, 183, 184, 184, 194, 194, 120, 120, 120,
	120, 118, 118, 119, 119, 190, 190, 190, 190, 115,
	115, 191, 191, 191, 150, 150, 197, 197, 197, 215,
	215, 94, 94, 94, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	199, 199, 199, 199, 201, 201, 201, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 214, 214, 214, 214, 214, 202, 202, 209, 209,
	210, 210, 211, 212, 203, 203, 204, 204, 205, 206,
	213, 213, 213, 213, 217, 217, 207, 207, 207, 207,
	207, 208, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 128, 128, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	160, 160, 160, 160, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 246, 246, 246, 246, 246,
	246, 246, 248, 248, 249, 249, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 255, 255, 256, 256, 258, 258, 259,
	259, 260, 261, 261, 261, 262, 263, 263, 257, 257,
	264, 264, 264, 265, 265, 266, 266, 266, 266, 266,
	172, 172, 172, 173, 173, 174, 180, 180, 180, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 70, 70, 70, 70, 70,
	102, 102, 169, 169, 167, 167, 167, 171, 171, 121,
	121, 216, 216, 216, 216, 216, 216, 216, 122, 122,
	122, 129, 123, 123, 124, 124, 124, 124, 124, 124,
	163, 164, 125, 125, 125, 165, 165, 175, 179, 179,
	178, 177, 177, 176, 176, 153, 153, 154, 154, 152,
	151, 110, 110, 109, 109, 108, 108, 280, 280, 181,
	181, 111, 111, 112, 104, 104, 192, 192, 192, 192,
	98, 98, 77, 77, 99, 99, 73, 73, 76, 76,
	74, 74, 74, 74, 92, 92, 93, 93, 71, 71,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 218, 218, 218, 168, 65, 65, 65, 66, 66,
	67, 67, 223, 223, 223, 224, 224, 224, 224, 222,
	222, 222, 222, 222, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 2,
	4, 2, 4, 4, 4, 4, 4, 4, 4, 2,
	3, 4, 3, 3, 4, 4, 2, 5, 5, 2,
	2, 0, 2, 0, 6, 6, 5, 5, 4, 12,
	4, 12, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 4, 4, 2, 2, 2,
	2, 2, 0, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 1, 3, 3, 0, 3, 8, 11, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 6, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 7, 4,
	6, 3, 1, 5, 6, 9, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 6, 4, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 223, 66, -8, -9, -10, -11, -12,
	-13, -253, 94, 102, 124, 205, 101, 87, 118, 226,
	233, -44, -46, 242, -145, 245, 35, 254, 60, 97,
	228, 221, 222, 279, 68, -251, -47, -45, 328, 302,
	309, 237, -48, 263, 294, 331, 263, 133, 80, 297,
	-269, -99, 263, 80, -74, -65, 321, 4, -230, -232,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	108, 109, 112, 114, 119, 124, 125, 126, 127, 134,
	137, 139, 132, 147, 149, 150, 153, 152, 157, 160,
	163, 165, 166, 167, 170, 168, 172, 173, 175, 174,
	180, 182, 183, 185, 188, 191, 194, 197, 198, 199,
	200, 203, 205, 207, 208, 209, 211, 212, 214, 215,
	216, 217, 218, 221, 219, 220, 222, 223, 224, 226,
	228, 229, 231, 243, 244, 255, 233, 234, 235, 236,
	239, 240, 242, 245, 247, 250, 253, 254, 256, 259,
	257, 252, 262, 264, 265, 266, 267, 268, 275, 279,
	280, 281, 282, 285, 286, 287, 289, 291, 292, 293,
	298, 303, 304, 305, 306, 307, 28, 36, 37, 38,
	39, 41, 42, 45, 46, 50, 51, 52, 55, 82,
	84, 85, 100, 103, 104, 110, 120, 122, 128, 129,
	138, 140, 141, 142, 144, 155, 169, 179, 181, 192,
	196, 202, 204, 210, 230, 238, 248, 249, 258, 260,
	270, 271, 272, 276, 277, 294, 295, -269, -73, -65,
	80, 89, 137, 287, 286, 80, 133, 263, 297, -17,
	328, -29, -7, -15, -4, -24, -38, -14, -32, -18,
	-33, -34, -35, -16, 23, -222, 4, -230, -232, -231,
	-233, 57, 69, 117, 136, 130, 146, 148, 156, 158,
	171, 193, 195, 227, 246, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 43, 48, 49, 53, 56, 58,
	64, 68, 72, 73, 74, 75, 76, 77, 86, 88,
	90, 91, 92, 95, 97, 99, 105, 106, 107, 113,
	115, 116, 118, 121, 123, 131, 133, 135, 143, 145,
	151, 154, 159, 161, 162, 176, 177, 178, 184, 186,
	187, 189, 190, 201, 206, 213, 225, 237, 241, 251,
	261, 263, 269, 273, 274, 278, 283, 284, 288, 290,
	296, 297, 299, 300, 301, 302, -65, -65, -65, 205,
	22, -273, 22, -274, -275, 68, 94, 118, 237, 137,
	89, 286, -273, -69, 233, -65, -141, 160, 240, 54,
	230, 275, -142, -140, -221, 270, 170, -100, -65, 4,
	22, 54, 241, 80, 59, 81, 119, 133, 134, 64,
	65, 150, 264, 270, 275, 68, 289, 266, -278, 275,
	275, -278, -278, -68, 275, 273, -69, -221, -277, 263,
	263, 288, 297, -130, 80, 284, -45, -47, -46, -88,
	-89, 283, 143, 99, 190, -44, -46, -251, -254, 211,
	-250, -65, -254, -85, -86, 22, 91, 332, -190, -73,
	187, -112, 328, -3, -190, 128, -73, -76, 128, -73,
	-65, -190, 128, 273, 332, -99, -92, -65, -152, -151,
	330, 116, 116, 328, -109, -110, -151, -152, 116, 145,
	145, -191, -190, -65, 128, -77, 128, -76, -101, 128,
	-100, -101, 128, -196, -195, -224, 4, -230, -232, -231,
	294, 263, 133, -170, 328, -126, 328, -65, 22, 186,
	332, 186, -65, -141, 52, -141, 243, 328, -143, -63,
	-64, 147, 207, 273, 313, 116, 307, -81, 5, 86,
	-103, 330, 54, 243, 116, -270, 186, 116, 116, 116,
	116, 116, 116, 307, 147, 207, 255, 263, 297, 116,
	-144, -63, -64, -144, 273, -69, -115, -190, -100, 128,
	-65, -100, 133, -65, 128, -88, -89, -114, -133, -134,
	159, 184, -117, 22, 91, -117, -117, 44, 329, 329,
	332, -254, -93, 328, -104, -192, -158, 321, -160, 319,
	320, 314, 176, 308, -172, -162, -175, 100, 230, 328,
	-73, -161, 333, 9, -248, -46, 29, -173, -174, 48,
	-65, 7, 8, 5, 6, -71, -199, -168, -208, 278,
	105, 178, -246, -247, 4, -230, -223, -200, -210, -204,
	-207, 144, 57, 73, 76, 74, 77, 241, 288, 49,
	28, 103, 104, 196, 202, 260, 276, 277, 128, 179,
	129, 55, 120, 155, 93, 37, 39, 41, 42, 50,
	51, 82, 84, 85, 110, 138, 140, 141, 142, 181,
	210, 248, 258, 271, 272, 295, -231, -211, -212, -205,
	-206, -213, -104, -112, 321, -73, 328, -111, -181, -158,
	86, -53, 219, -52, 21, 23, 94, 292, 100, 252,
	267, 234, 252, 267, 234, 219, 100, 333, 219, 219,
	100, -228, -225, 9, -224, 5, -74, 332, -222, 321,
	-229, -228, 256, 329, -98, -73, -110, -191, -75, -73,
	-75, 242, -65, 30, 100, -55, 332, 47, 224, 100,
	-55, 332, 100, -55, 100, 329, 332, -190, 128, -76,
	30, -169, -197, -198, -200, -209, -203, -207, -208, 40,
	46, 45, 268, 169, 238, 249, 38, 185, 139, 138,
	140, 141, 142, 248, 37, 210, 110, 93, 85, 84,
	181, 42, 41, -211, -212, -205, -206, 82, 271, 272,
	144, 39, 51, 50, 295, 258, -102, -158, -269, -275,
	-269, 30, -140, -221, -102, 332, 332, 157, -80, 163,
	175, 125, -220, 86, -226, -219, -182, 9, 278, 105,
	186, -225, 8, 320, -218, 7, 319, -220, 86, 71,
	-227, 5, 4, -168, -182, 86, 160, -208, 330, -222,
	244, -100, 22, -221, -272, 113, -269, -221, -221, -221,
	-221, -221, -65, 157, -221, -221, 263, 133, -146, 209,
	332, 332, -146, -69, -55, 332, 328, -87, 176, -252,
	302, -87, 328, -66, 128, -65, -252, 176, -114, -134,
	-133, -135, -158, 22, -158, -160, -45, -45, -45, -90,
	-186, -158, -250, 30, -92, -95, 332, 116, 10, 11,
	56, 33, 319, 320, 321, 322, 111, 323, 324, 317,
	318, 316, 311, 312, 313, 62, 164, 232, 13, 14,
	15, 26, 189, 158, 308, 130, 246, 314, 16, 17,
	18, 146, 36, 131, -70, 30, 4, -78, -158, -158,
	-158, -158, -158, 195, -108, -153, 326, -46, 328, -46,
	-158, -102, 7, -46, -167, 326, -176, -158, -109, 328,
	5, 328, 5, -255, 303, 113, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 204, -217, 298, -217, -217, -201, 328,
	-201, -202, 328, -201, 304, 309, 328, -95, -73, 332,
	329, 332, 273, -131, 64, 58, -148, 128, 58, -234,
	-65, 64, -235, 53, 284, 206, 115, -131, 64, -131,
	64, 64, -190, 33, -29, 116, 33, -29, 116, 273,
	-76, -65, 273, 273, -190, -194, 310, -65, -194, 332,
	116, 329, 332, -150, 300, -137, -29, 328, 86, 30,
	-137, -105, -106, -193, -107, -73, 328, -65, -65, -76,
	-77, -100, -101, -101, -17, -195, 100, -20, -29, -24,
	-38, -14, 329, 332, -94, 29, -127, 328, 306, 167,
	83, 126, 166, -128, 236, 329, 332, 273, 116, 275,
	329, -64, -63, -79, 209, 250, 220, 239, 332, 8,
	7, 7, -222, -271, -65, -73, -76, 305, 187, -64,
	-63, -190, -82, -92, -83, -65, -149, -148, -236, -237,
	-234, 133, 284, 106, 30, 100, -62, 200, 30, 186,
	176, -58, 265, 100, -136, 230, 231, 332, -51, 31,
	90, 328, 329, -150, -192, -97, -188, 326, -190, -73,
	-46, -189, 328, -215, -197, -214, 215, 216, 214, 218,
	217, -197, -222, 270, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, 158, 130, 246, 36,
	131, -158, 273, -158, -158, -158, -158, 168, 176, 178,
	278, 105, 285, 91, 182, -280, 261, 32, -165, -46,
	328, -180, 27, 251, 22, -222, -172, 230, 328, -153,
	-158, -154, -102, 329, 329, 332, -102, -171, 327, -167,
	-179, -178, 299, 329, -102, 296, 22, 91, 321, 7,
	-127, -256, 108, 121, 328, 329, 329, -158, -158, -121,
	-216, -102, 4, 306, 167, 83, 126, 166, 236, -121,
	-122, -158, -102, -123, -159, -160, 319, 320, 314, 328,
	230, -124, -158, -102, -158, 43, 154, 274, -125, -158,
	116, -102, -158, -158, -158, -102, -102, -102, 328, 7,
	7, 270, 270, 7, -150, 329, -181, -52, -73, -65,
	-65, 176, -148, 128, -57, 176, -197, -65, 328, 328,
	149, 149, -65, -65, 128, -65, 128, -65, -65, -53,
	219, -29, 328, -29, 328, -65, 219, -65, -73, 219,
	-39, 127, 182, -42, 302, -228, 256, 116, -73, -116,
	225, -158, -116, -139, 186, -98, 294, -65, -116, -96,
	332, 116, 313, -98, -55, -55, -55, -190, -197, 326,
	326, 7, 273, 273, 273, 273, 328, -158, -271, -271,
	-63, 282, 61, 209, -226, 332, 329, 329, 332, -66,
	133, -66, -29, -100, 5, -29, -73, 100, -59, 96,
	-279, 313, -65, -186, -20, -113, 121, -194, 332, 69,
	-120, 148, 171, 117, 156, 227, 136, 7, 102, -155,
	333, 328, -185, 309, -46, -189, -188, 307, -158, -158,
	273, -280, 261, -165, -158, 168, 178, 278, 105, 285,
	91, 182, 116, 328, -159, -159, -102, -162, 328, -102,
	327, 336, 329, -158, 327, 327, 332, -177, -178, 95,
	-158, -89, 332, -88, -158, -102, -102, 329, 329, -261,
	194, 328, 328, -158, 30, 332, 329, 116, 329, 329,
	-129, 201, 329, 10, 11, 319, 320, 321, 322, 111,
	323, 324, 317, 318, 316, 311, 312, 313, 62, 164,
	232, 13, 14, 15, 146, 131, -159, -159, -159, -102,
	328, 329, -163, -164, 116, 113, 30, -125, -125, -125,
	329, 116, -102, 332, 332, 332, 329, 329, 329, 7,
	329, 332, 329, 307, 307, 329, -113, 273, 273, 100,
	176, 291, -238, -235, -158, -91, -187, -65, -249, 328,
	-246, -247, -71, 328, 328, -50, 94, 242, -132, 100,
	-55, 100, -55, 273, -131, 64, -102, -102, 273, 273,
	-42, 116, 262, 188, 256, -104, 177, -116, 63, 329,
	-150, -106, -97, -181, 329, 327, 7, 7, 329, 167,
	126, 166, -128, 166, -128, -128, 7, -65, -84, 132,
	-149, 328, -66, 328, 328, -87, 328, -65, -60, 153,
	-279, -225, -252, 329, -166, 123, 44, -188, 148, 148,
	-188, -120, 148, -118, 193, -118, -118, -267, 328, -17,
	328, -185, -222, 326, 334, -102, -184, -183, 30, -65,
	191, 329, -158, -158, -159, -159, 116, 328, -158, -169,
	26, 26, 329, -102, 329, 332, -154, -158, 329, -167,
	97, -158, 269, 329, 296, -89, -89, -89, 5, -262,
	-65, 328, 300, -88, 329, -215, -197, -158, -163, -158,
	-215, -197, -159, -159, -159, -159, -159, -159, -159, -159,
	-159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
	-159, 91, 176, 182, -159, 332, -102, 329, -164, -163,
	-158, -158, -197, 329, 329, 329, -102, -158, -158, -158,
	329, 7, -166, -65, -65, -148, 100, -239, 64, -240,
	56, 106, 68, 176, 178, 284, 206, 53, 86, 213,
	329, 329, 332, -72, -109, 56, -72, -158, 328, -91,
	-92, 176, 86, 176, 86, 79, 280, -65, -65, -73,
	-65, -65, 329, 329, -65, -73, -229, 270, 328, -138,
	328, 186, -29, -116, 313, 327, 327, 329, 131, -91,
	328, -92, -82, 30, -91, 186, -61, 152, -279, -225,
	-58, -258, 301, -158, -102, -188, -188, -119, 290, 186,
	148, -188, 327, 329, -268, 7, 327, -196, -184, 7,
	-157, -156, 114, 174, 329, -65, 328, -185, 26, 26,
	-158, -169, 329, -158, -158, 329, -158, 327, -158, 5,
	-158, 329, 329, 329, -263, -65, -158, 329, 329, 329,
	-164, 116, 91, 182, 328, -158, 329, 329, 332, 329,
	329, 329, -258, -148, -65, -222, -65, 106, 128, 178,
	149, 328, -159, -73, -147, -276, 67, 259, -187, -51,
	-222, -51, 329, -102, 329, 329, 178, 178, -158, -197,
	-55, -55, 273, 273, 273, 273, -161, -71, -65, -41,
	-40, 5, 92, -92, 64, -112, -46, 328, 197, 329,
	-91, 329, 329, -29, 329, -73, -279, -225, -59, -259,
	-260, -65, -119, 328, -158, -188, -155, 329, 332, -185,
	329, 327, 332, 335, 313, -185, 328, -92, -183, -158,
	-158, 329, 329, -89, -257, 199, 329, -159, 116, 328,
	-169, 329, -158, -240, -66, 176, -158, -67, 328, -84,
	328, -72, -89, 213, -54, 56, -65, -65, 328, 328,
	328, 332, 329, -43, 313, 286, 177, 329, -65, -65,
	-147, 329, -84, -147, 328, -225, -60, 332, 30, -92,
	-185, 7, -184, -17, -156, -222, 326, -184, -92, 329,
	329, -89, 44, -159, -169, 329, 329, 100, 329, -243,
	165, -65, -92, -51, 329, -73, -49, 290, -222, -102,
	-102, -102, -40, 5, 242, -150, 328, -84, -147, -84,
	-91, -61, -260, -262, 329, -183, 327, 7, 329, -264,
	208, 231, -102, 329, 106, -241, -244, -242, 186, 117,
	198, 247, 329, 329, -87, -158, 329, 329, -89, -105,
	-92, -84, 329, -185, 327, 329, -265, -266, 36, 281,
	71, -158, -265, -65, -242, 186, -244, 186, 286, 89,
	-243, 329, -150, 329, -147, -184, -266, 203, 112, 230,
	203, 112, -245, 173, 224, 47, 242, -245, -241, -56,
	47, 224, -84, 26, 20, 178, 86, -266,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 433, 0, 0, 0, 0, 0, 0,
	0, 405, -2, 0, 157, 0, 354, 0, 354, 354,
	358, 0, 0, 435, 317, 432, -2, 443, 0, 0,
	0, 441, 419, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 965, 894, 900, 901, 925, 926, 927,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 0, 0, 896,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 0, 229, 939, 940, 941, 942,
	943, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 121, 128, 129, 1017,
	131, 0, 138, 139, 140, 142, 143, 144, 145, 146,
	147, 148, 0, 344, 1041, 360, 152, 994, 1046, 953,
	1119, 1063, 160, 170, 0, 1125, -2, 174, 97, 203,
	204, 0, 208, 209, 0, 211, 231, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 226, 0, 365, 353,
	365, 347, 348, 349, 355, 0, 343, 151, 0, 434,
	0, 0, 0, 0, 0, 316, -2, 415, 416, -2,
	0, 438, 438, 438, 0, 0, 416, 0, 424, 1021,
	427, 907, 425, 0, 0, 440, 439, 0, 420, 515,
	0, 463, 0, 2, 0, 1103, 515, 0, 1103, 899,
	0, 0, 1103, 0, 0, 136, 137, 904, 902, 903,
	0, 0, 0, 0, 897, 873, 871, 872, 0, 0,
	0, 0, 521, 87, 1103, 55, 1103, 892, 55, 1103,
	95, 55, 1103, 0, 116, 118, 935, 936, 937, 938,
	1130, 0, 0, 0, 0, 126, 0, 130, 132, 0,
	0, 0, 359, 153, 1092, 155, 0, 0, 159, 161,
	162, 0, 0, 0, 0, 0, 0, 173, 198, 199,
	98, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 222, 223, 0, 0, 0,
	352, 361, 362, 352, 0, 357, 55, 519, 289, 1103,
	431, 289, 929, 431, 1103, -2, 0, 411, 450, 451,
	0, 0, 0, 436, 437, 0, 0, 0, 407, 408,
	0, 426, 0, 0, 466, 884, 888, 889, 618, 0,
	0, 0, 0, 0, 0, 710, 712, 1097, 1119, 0,
	714, 715, 0, 717, 719, 720, 0, 723, 724, 864,
	896, 910, 911, 912, 913, 0, 0, 916, 0, 918,
	919, 920, 764, 733, -2, -2, 908, 550, 551, 552,
	553, -2, 1132, 737, 739, 741, 742, 743, 744, 0,
	1081, 1098, 1099, 1115, 1116, 1124, 1128, 1129, 1103, 1112,
	1104, 1093, 1101, 1110, 970, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 934, 580, 581, 586,
	587, 589, 466, 464, 516, 517, 0, 0, 881, 879,
	880, 32, 340, 34, 0, 340, 340, 0, 0, 0,
	0, 238, 0, 0, 240, 0, 0, 0, 0, 0,
	0, 506, 64, 65, 201, 202, 895, 0, 869, 870,
	506, 66, 77, 0, 0, 890, 874, 525, 0, 382,
	0, 0, 522, 0, 0, 89, 0, 53, 54, 0,
	91, 0, 0, 93, 0, 433, 0, 0, 1103, 0,
	433, 0, 822, 533, 534, 535, 536, 537, 615, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 557,
	558, 559, 560, 561, 562, 563, 577, 0, 556, 556,
	556, 569, 570, 578, 579, 584, 585, 596, 597, 599,
	601, 595, 595, 595, 592, 593, 0, 820, 0, 141,
	0, 0, 156, 0, 0, 0, 0, 0, 165, 185,
	186, 187, 166, 168, 175, 177, 178, 179, 188, 189,
	190, 191, 306, 0, 308, 921, 0, 167, 169, 171,
	172, 192, 193, 194, 195, 196, 197, 0, 0, 99,
	207, 205, 206, 210, 212, 0, 230, 213, 214, 215,
	216, 217, 218, 221, 224, 225, 0, 0, 345, 0,
	0, 0, 346, 356, 309, 0, 247, 0, 0, 312,
	430, 0, 0, 0, 1103, 928, 370, 0, 414, 448,
	449, 452, 455, 456, 453, 618, 421, 422, 423, 444,
	445, 327, 428, 0, 0, 525, 0, 0, 0, 0,
	0, 0, 799, 800, 801, 802, 803, 804, 807, 808,
	805, 806, 809, 810, 811, 0, 0, 0, 812, 813,
	814, 0, 0, 816, 0, 818, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 887, 815, 623, 624,
	625, 647, 648, 0, 711, 875, 868, 713, 0, -2,
	820, 0, 716, 721, 722, 0, 0, 863, -2, 0,
	915, 0, 615, 766, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 843, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 583, 594, 591, 590, 567, 0,
	566, 564, 0, 568, 0, 0, 0, 525, 0, 0,
	883, 0, 0, 0, 0, 339, 36, 1103, 0, 57,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 236, 0, 0, 237, 0, 0,
	0, 898, 0, 0, 0, 69, 0, 905, 76, 0,
	0, 0, 0, 394, 0, 394, 384, 0, 0, 0,
	394, 397, 398, 400, 401, 0, 0, 523, 88, 893,
	55, 96, 55, 55, 102, 117, 0, 119, 122, 123,
	124, 125, 120, 0, 526, 528, 538, 0, 602, 603,
	604, 605, 606, 607, 616, 127, 0, 0, 0, 0,
	158, 163, 164, 366, 0, 182, 0, 184, 0, 307,
	923, 922, 100, 232, 149, 227, 228, 350, 351, 363,
	364, 520, 0, 0, 246, 904, 248, 250, 251, 252,
	253, 929, 0, 929, 0, 0, 310, 0, 0, 0,
	0, 372, 378, 0, 454, 457, 458, 0, 447, 325,
	326, 433, 906, 460, 885, 506, 467, 0, 477, 515,
	492, 482, 0, 619, 529, 530, 571, 572, 573, 574,
	575, 620, 621, 0, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, -2, -2, -2, 639, 640, 641,
	-2, -2, -2, 645, 646, -2, 817, 819, 0, 878,
	0, -2, 0, -2, -2, -2, -2, 659, 0, 661,
	664, 666, 668, 0, 0, 0, 0, 877, 678, 855,
	0, 0, 796, 797, 798, 886, 663, 0, 0, 876,
	867, 0, 0, -2, 718, 0, 0, 0, 826, 827,
	862, 858, 0, 725, 443, 0, 0, 0, 0, 0,
	924, 774, 0, 0, 0, 738, 740, 0, 0, 0,
	0, 830, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 820, 840, 0, 0, 681, 0, 0, 0, 0,
	1119, 0, 820, 848, 0, 0, 0, 0, 0, 820,
	0, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 460, 518, 882, 35, 329, 0,
	0, 0, 38, 1103, 46, 0, 261, 0, 0, 0,
	0, 0, 342, 47, 1103, 55, 1103, 55, 48, 33,
	340, 234, 0, 235, 0, 333, 0, 328, 331, 0,
	76, 0, 0, 63, 0, 67, 78, 0, 891, 86,
	0, 524, 379, 394, 0, 0, 386, 383, 381, 525,
	0, 0, 0, 0, 90, 92, 94, 0, 823, 0,
	0, 0, 0, 0, 0, 0, 0, 821, 133, 134,
	154, 180, 181, 183, 176, 0, 255, 288, 0, 0,
	929, 0, 244, 289, 311, 313, 0, 0, 374, 378,
	0, 377, 431, 446, 0, 462, 0, 465, 0, 0,
	0, 0, 0, 512, 512, 512, 510, 486, 433, 492,
	0, 0, 504, 0, -2, 482, 0, 0, -2, -2,
	0, 0, 0, 679, -2, 660, 662, 665, 667, 669,
	0, 0, 0, 0, 0, 0, 0, 680, 0, 0,
	865, 868, -2, 821, 824, 825, 0, 0, 859, 0,
	0, 0, 0, 442, 443, 443, 443, 731, 0, 732,
	0, 0, 0, 0, 0, 0, 747, 0, 748, 749,
	0, 0, 750, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 684, 685, 686, 0,
	0, 751, 846, 847, 0, 0, 0, 0, 0, 0,
	756, 0, 853, 0, 0, 0, 760, 761, 762, 0,
	554, 0, 576, 598, 600, 588, 462, 0, 0, 0,
	0, 56, 259, 278, 0, 0, 318, 324, 324, 0,
	734, 735, 0, 0, 0, 40, 0, 0, 0, 0,
	44, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 79, 392, 393, 380, 391, 0,
	394, 399, 396, 402, 0, 531, 0, 0, 539, 608,
	609, 610, 611, 612, 613, 614, 0, 150, 242, 0,
	249, 0, 0, 0, 247, 0, 0, 0, 376, 378,
	0, 369, 370, 429, 768, 0, 0, 468, 0, 0,
	0, 0, 0, 507, 511, 508, 509, 0, 0, 0,
	0, 504, 474, 0, 0, 0, 481, 503, 0, 502,
	491, -2, 622, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 856, 0, 791, 0, 0, 867, -2, 828,
	857, 861, 0, 726, 0, 0, 0, 0, 917, 772,
	773, 777, 0, 0, 736, 0, 0, 829, 839, 841,
	682, 683, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, -2, -2, -2, 700, 701, 702, -2, -2,
	-2, 0, 0, 0, 842, 0, 0, 794, 844, 845,
	850, 851, 0, 753, 754, 755, 852, 0, 0, 0,
	582, 0, 768, 335, 337, 37, 0, 260, 0, 263,
	0, 0, 0, 0, 269, 270, 0, 0, 0, 0,
	280, 287, 0, 327, 909, 0, 327, 0, 0, 0,
	0, 0, 52, 0, 0, 341, 0, 55, 55, 330,
	0, 0, 0, 0, 334, 332, 68, 0, 0, 0,
	0, 0, 385, 395, 0, 532, 527, 617, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 378, 0, 371,
	372, 417, 0, 461, 459, 494, 0, 496, 0, 0,
	0, 498, 477, 487, 0, 489, 492, 0, 479, 0,
	0, 472, 0, 471, 492, 500, 0, 0, 0, 0,
	-2, 0, 672, -2, -2, 790, 821, 866, 860, 914,
	443, 727, 729, 730, 779, 776, 0, 763, 745, 746,
	838, 0, 0, 0, 0, 821, 793, 752, 0, 758,
	759, 555, 418, 39, 0, 264, 265, 929, 0, 268,
	271, 0, 273, 931, 255, 0, 284, 285, 319, 320,
	323, 321, 324, 443, 282, 0, 41, 42, 51, 59,
	43, 49, 0, 0, 0, 0, 505, 0, 0, 0,
	73, 71, 0, 0, 0, 403, 404, 0, 0, 287,
	0, 277, 255, 245, 287, 0, 0, 373, 374, 767,
	769, 0, 495, 0, 514, 497, 492, 488, 0, 504,
	433, 475, 0, 476, 0, 504, 0, 0, 483, -2,
	-2, 673, 792, 0, 443, 0, 765, -2, 0, 0,
	0, 795, 0, 262, 266, 0, 0, 293, 0, 281,
	0, 327, 0, 0, 61, 0, 336, 338, 0, 0,
	0, 0, 75, 72, 0, 0, 388, 525, 390, 0,
	255, 287, 243, 255, 0, 375, 376, 0, 0, 0,
	0, 490, 484, 0, 473, 469, 0, 480, 0, 501,
	728, 782, 0, -2, 0, 708, 757, 0, 272, 298,
	0, 0, 0, 322, 726, 289, 45, 0, 58, 0,
	0, 443, 74, 70, 0, 389, 0, 275, 255, 314,
	0, 368, 770, 771, 513, 478, 492, 0, 499, 0,
	0, 0, 778, 709, 0, 274, 294, 295, 0, 290,
	291, 292, 930, 286, 293, 60, 239, 241, 0, 525,
	0, 276, 287, 504, 470, 775, 780, 783, -2, 1066,
	962, 0, 781, 267, 296, 0, 297, 0, 0, 0,
	298, 0, 387, 258, 255, 485, 0, 785, 786, 787,
	788, 789, 299, 0, 302, 303, 0, 300, 283, 254,
	256, 257, 315, 0, 301, 304, 305, 784,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 317, 3, 323, 318, 3,
	328, 329, 321, 319, 332, 320, 330, 322, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 336, 331,
	311, 313, 312, 3, 333, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 326, 3, 327, 324, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 334, 316, 335, 314,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 315, 57654, 325,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:780
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:786
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:792
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:911
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:921
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:984
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1061
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1318
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1470
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1581
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1609
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1613
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1657
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1665
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1685
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1689
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1732
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1736
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1742
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1746
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1750
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1754
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1825
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1829
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = DropDefault
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1839
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2047
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			return unimplemented(sqllex)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2055
		{
			return unimplemented(sqllex)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
			return unimplemented(sqllex)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			return unimplemented(sqllex)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2061
		{
			return unimplemented(sqllex)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			return unimplemented(sqllex)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = true
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = false
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			return unimplemented(sqllex)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2179
		{
			return unimplemented(sqllex)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2183
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = Ascending
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = Descending
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2237
		{
			return unimplemented(sqllex)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2238
		{
			return unimplemented(sqllex)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = true
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = false
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2252
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return unimplemented(sqllex)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2296
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2299
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2300
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.str = ""
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.str = ""
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.str = ""
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.str = ""
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.str = ""
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.str = ""
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2422
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2423
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2487
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			return unimplemented(sqllex)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2499
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2521
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2522
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2749
		{
			return unimplemented(sqllex)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
			return unimplemented(sqllex)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			return unimplemented(sqllex)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
			return unimplemented(sqllex)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2755
		{
			return unimplemented(sqllex)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2758
		{
			return unimplemented(sqllex)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2762
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			return unimplemented(sqllex)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2766
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2770
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = true
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = false
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = false
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = true
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2794
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2832
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2852
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &From{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2988
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3033
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3050
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = nil
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = true
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = false
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.str = astFullJoin
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.str = astLeftJoin
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.str = astRightJoin
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.str = astInnerJoin
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3228
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3229
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3328
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3343
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3352
		{
			return unimplemented(sqllex)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3411
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3420
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = nil
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3469
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3565
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3597
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3637
		{
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = year
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = month
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = day
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = hour
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = minute
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = month
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = hour
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = minute
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = minute
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = nil
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = second
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3732
		{
			return unimplemented(sqllex)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3767
		{
			return unimplemented(sqllex)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			return unimplemented(sqllex)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4001
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4227
		{
			return unimplemented(sqllex)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4228
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4251
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			return unimplemented(sqllex)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4272
		{
			return unimplemented(sqllex)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			return unimplemented(sqllex)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			return unimplemented(sqllex)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
			return unimplemented(sqllex)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4321
		{
			return unimplemented(sqllex)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4365
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4366
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = Window(nil)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4401
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.str = ""
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4463
		{
			return unimplemented(sqllex)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4464
		{
			return unimplemented(sqllex)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4465
		{
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			return unimplemented(sqllex)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4469
		{
			return unimplemented(sqllex)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4475
		{
			return unimplemented(sqllex)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			return unimplemented(sqllex)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4477
		{
			return unimplemented(sqllex)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4478
		{
			return unimplemented(sqllex)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4479
		{
			return unimplemented(sqllex)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = Any
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = Some
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = All
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = Plus
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = Minus
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = Mult
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = Div
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = FloorDiv
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = Mod
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = Bitand
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = Bitor
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = Pow
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = Bitxor
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = LT
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = GT
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = EQ
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = LE
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = GE
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = NE
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = Like
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = NotLike
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = ILike
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = NotILike
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4843
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4844
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4962
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5006
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5042
		{
			return unimplemented(sqllex)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = DNull
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5081
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.str = ""
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
